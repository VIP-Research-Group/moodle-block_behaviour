{"version":3,"file":"behaviour-analytics.min.js","sources":["../src/behaviour-analytics.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * File to render and control the graphing and clustering on the client side.\n * This file also controls the module node positioning stage of the plugin as\n * well as the replaying of clustering.\n *\n * @package block_behaviour\n * @author Ted Krahn\n * @copyright 2019 Athabasca University\n * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\n/* eslint max-depth: [\"warn\", 6] */\n/* eslint complexity: [\"warn\", 21] */\n/* eslint-disable no-alert */\n\n(function(factory) {\n    if (typeof define === \"function\" && define.amd) {\n        // AMD. Register as an anonymous module.\n        define([], factory);\n    } else {\n        // Browser globals.\n        window.behaviourAnalytics = factory();\n    }\n})(function() {\n\n    var behaviourAnalytics = function(incoming) {\n\n        // These variables are the server-side scripts that are called.\n        var coordsScript, // Updates the node coordinates during node positioning.\n            clustersScript, // Updates the clustering results and membership changes.\n            commentsScript, // Updates the teacher comments about centroids.\n            manualScript, // Updates manual clustering during replay.\n            deleteScript, // Deletes the selected clustering data.\n            predictionScript; // Updates the prediction analysis.\n\n        // These variables get their values from the server data.\n        var logs, // Array of all logs from the server.\n            users, // Array of user data from server.\n            groups, // Array of group names indexed on group id.\n            groupMembers, // Array of group id indexed on student id.\n            groupMenu, // Group selection menu.\n            modules, // Array of module information.\n            panelWidth, // Width of left menu panel.\n            legendWidth, // Width of right legend panel.\n            courseName, // Name of the course.\n            iframeURL, // Server prefix for iframes.\n            positioning, // Boolean flag indicates regular graphing or node positioning.\n            originalPositioning, // Other positioning flag gets changed, but need to know original value.\n            presetNodes, // Predetermined node coordinates from server.\n            lordLinks, // When integrated with LORD plugin, need links between nodes.\n            coordsScale, // Scale value used for normalizing preset nodes.\n            courseId, // Course id number.\n            userId, // Teacher user id number.\n            allGraphs, // For researcher role, all other teachers graphs.\n            allLinks, // For researcher role, all LORD link sets.\n            allScales, // For researcher role, all teachers scales.\n            allChanges, // For researcher role, all teachers change times.\n            allNames, // For researcher role, all teachers usernames.\n            allMods, // For researcher role, all users mods (node coords).\n            allSetNames, // For researcher role, all dataset names\n            allsKey, // For researcher role, current key into previous arrays.\n            lastChange, // Time of last node positioning change.\n            comments, // Any comments this teacher user has made during clustering.\n            realUserIds, // Map of anonymized id to real id.\n            anonUserIds, // Map of real user ids to anonymous ids.\n            langStrings, // An array of language dependent strings.\n            sessionKey, // The session key gets sent back to the server to avoid CSRF.\n            originalReplayData; // The replay data.\n\n        // These variables are external packages used in the plugin.\n        var ddd, // D3 package.\n            trans, // D3 transition.\n            slider, // The noUiSlider package.\n            prng; // Psuedo random number generator, i.e. Mersenne Twister package.\n\n        // Main graphing variables.\n        var graph, // The main graph.\n            width, // The graph width.\n            height, // The graph height.\n            simulation, // The force directed simulation.\n            graphNodes, // The graph nodes.\n            graphLinks, // The graph links.\n            linkForce, // The link force in simulation.\n            defaultWeight, // The default link weight.\n            linkAlpha, // The base alpha value.\n            dragAlpha, // The alpha when dragging.\n            dragEndAlpha, // The alpha when done dragging.\n            graphData; // The node and link data.\n\n        // The main UI variables.\n        var studentMenu, // Student select menu used in graphing.\n            timeSlider, // The time slider used in graphing.\n            sliderValues, // Values on time slider.\n            sliderHeight, // Height of time slider.\n            clusterButton, // Cluster/graph button to switch between graphing/clustering.\n            replaying, // Clustering replay flag.\n            replayMenu, // Clustering replay menu of clustering runs.\n            replayData, // Clustering replay data, iterations of current clustering.\n            replayCentroid, // Clustering replay centroid and scale data.\n            positiveIters, // Clustering replay, number of positive value iterations.\n            negativeIters, // Clustering replay, number of negative value iterations.\n            clusterSlider, // The clustering slider used in clustering.\n            clusterSliderValue, // Value of cluster slider.\n            clusterSliderPanelWidth, // Width of cluster slider.\n            logPanel, // Text area log panel used in clustsering.\n            nodeLegend, // Hiearchical legend used in node positioning.\n            nodeBoxes, // Node checkboxes in node legend.\n            teacherMenu; // Teacher select menu used in positioning (researchers).\n\n        // Other variables.\n        var colours, // Array of html colours for user links and hulls.\n            colourIndex, // Index of current colour in colours.\n            modColours, // Module colours for nodes.\n            centroidColours, // Array of colours for centroids.\n            graphing, // Are we graphing or clustering?\n            clustering, // Are we clustering or just in clustering stage?\n            clusterIters, // Number of cluster iterations.\n            clusterAnimInterval, // Clustering animation interval.\n            useDefaultConcave, // Should use default setting for hull?\n            concaveHullDistance, // If not use default, then need new distance.\n            curveType, // Type of curve for line drawing.\n            hullOpacity, // Opacity for hulls.\n            hullCentroids, // Centroids of student hulls.\n            scaledCentroids, // Centroids after scaling.\n            centroids, // Current clustering centroids.\n            oldCentroids, // Centroids from last clustering iteration.\n            noCentroidMouse, // Flag for setting and unsetting mouse listeners.\n            noNodeMouse, // Flag for setting and unsetting mouse listeners.\n            iframeStaticPos, // Flag to place iframe at window edge/below node.\n            iframeRight, // Flag to position an iframe on the right side.\n            inIframe, // Flag to remove iframe or not.\n            version36, // Flag for log panel styling, and iframe offset, different in 3.6.\n            showStudentNames, // Flag to show student names or sequential ids.\n            convergenceDistance, // Mean distance between old centroids and new.\n            dragEndTime, // Time dragging was stopped.\n            dragstartedFunc, // Node drag started function.\n            draggedFunc, // Node dragging function.\n            dragendedFunc, // Node drag ended function.\n            rightClickFunc, // Node right click function.\n            nodeRadius, // Size of module nodes, smaller if smaller screen.\n            coordsData, // Holds data about the module coordinates.\n            animTime, // Animation delay.\n            gotAllNodes; // Flag to determine if there are new nodes to consider.\n\n        var manualClusters = {}, // Keeps clustering data for manual clustering during replay.\n            manualCentroids = [], // Keeps centroid data for manual clustering during replay.\n            haveManualClustering, // Flag to see if manual clustering has been done.\n            centroidDragTime, // Student centroids can be clicked or dragged, short drag == click.\n            replayUserId, // Other users data is seen when researcher runs replay, keep track.\n            isResearcher; // Flag to show or not the clustering measures.\n\n        var clickData, // The student click data.\n            useGeometricCentroids, // Flag to determine how to calculate centroids.\n            predictionAnalysis; // ID of current prediction analysis.\n\n        var useLSA; // Flag to use or not the LSA generated graph.\n        var lsaTime; // The time in ms that the LSA graph gets for physics.\n        var commentTextBoxes; // List of user who have open comment text boxes.\n\n        // Debugging.\n        var debugCentroids, // Turn on/off centroid debugging.\n            serverCentroids; // Copy of centroid values calculated at server.\n\n        /**\n         * Initialize the program. This function sets various default values and\n         * initializes various variables, then calls the necessary functions to run the\n         * program.\n         *\n         * @param {array} incoming - Data from server\n         */\n        function init(incoming) {\n\n            // Get incoming data from the server.\n            logs = incoming.logs;\n            users = incoming.users;\n            groups = incoming.groups;\n            groupMembers = incoming.members;\n            modules = incoming.mods;\n            panelWidth = incoming.panelwidth;\n            legendWidth = incoming.legendwidth;\n            courseName = incoming.name;\n            iframeURL = incoming.iframeurl;\n            version36 = incoming.version36;\n            showStudentNames = incoming.showstudentnames;\n            positioning = incoming.positioning;\n            originalPositioning = incoming.positioning;\n            presetNodes = incoming.nodecoords;\n            lordLinks = incoming.links;\n            courseId = incoming.courseid;\n            userId = incoming.userid;\n            coordsScale = incoming.scale;\n            allGraphs = incoming.graphs;\n            allLinks = incoming.alllinks;\n            allScales = incoming.scales;\n            allChanges = incoming.changes;\n            allNames = incoming.names;\n            allMods = incoming.allmods;\n            allSetNames = incoming.setnames;\n            allsKey = userId;\n            lastChange = incoming.lastchange;\n            comments = incoming.comments;\n            langStrings = incoming.strings;\n            coordsScript = incoming.coordsscript;\n            clustersScript = incoming.clustersscript;\n            commentsScript = incoming.commentsscript;\n            manualScript = incoming.manualscript;\n            deleteScript = incoming.deletescript;\n            sessionKey = incoming.sesskey;\n            gotAllNodes = incoming.gotallnodes;\n            replaying = incoming.replaying;\n            debugCentroids = incoming.debugcentroids;\n            serverCentroids = incoming.centroids;\n            isResearcher = incoming.isresearcher;\n            replayUserId = userId;\n            originalReplayData = incoming.replaydata;\n            predictionScript = incoming.predictionscript;\n            useLSA = incoming.uselsa;\n\n            predictionAnalysis = null;\n            if (incoming.predictionanalysis) {\n                var arr = incoming.predictionanalysis.split('_');\n                predictionAnalysis = {\n                    userid: arr[0],\n                    coordsid: arr[1],\n                    clusterid: arr[2]\n                };\n            }\n\n            // Get external packages.\n            ddd = window.dataDrivenDocs;\n            slider = window.noUiSlider;\n            var MT = window.mersenneTwister;\n            prng = new MT(259);\n\n            // Get base values for various variables.\n            colourIndex = 0;\n            colours = getColours();\n\n            dragEndTime = Date.now() + 3000;\n            animTime = 1000;\n            trans = ddd.transition().duration(animTime).ease(ddd.easeLinear);\n\n            // Should be dynamic sizes?\n            clusterSliderPanelWidth = 120;\n\n            convergenceDistance = 1;\n\n            dragEndAlpha = 0.0001;\n            defaultWeight = 1.0;\n\n            rightClickFunc = rightClick;\n\n            useDefaultConcave = false;\n            concaveHullDistance = 220;\n            hullOpacity = 0.15;\n            curveType = ddd.curveCatmullRomClosed;\n\n            useGeometricCentroids = true;\n\n            nodeBoxes = {};\n            coordsData = {};\n            commentTextBoxes = {};\n\n            modColours = {\n                'originalLinks': 'lightgrey', // Removed from colours[].\n                'grouping':      'black', // Removed from colours[].\n                'assign':        'blue',\n                'quiz':          'red',\n                'forum':         'orange',\n                'resource':      'green',\n                'lti':           'yellow',\n                'url':           'purple',\n                'book':          'magenta',\n                'page':          'cyan',\n                'lesson':        'brown',\n                'data':          'coral',\n                'chat':          'maroon',\n                'choice':        'grey',\n                'feedback':      'lime',\n                'glossary':      'navy',\n                'survey':        'tan',\n                'wiki':          'teal',\n                'workshop':      'silver',\n                'scorm':         'tomato',\n                'imscp':         'lightpink',\n                'folder':        'peru',\n            };\n\n            centroidColours = ['blue', 'red', 'orange', 'green', 'yellow', 'brown',\n                               'purple', 'magenta', 'cyan'];\n\n            // Basic dimensions.\n            sliderHeight = positioning ? 0 : 36;\n            panelWidth = positioning ? 0 : panelWidth;\n\n            width = window.innerWidth - clusterSliderPanelWidth - legendWidth - 150;\n            height = window.innerHeight - sliderHeight - 90;\n\n            nodeRadius = Math.min(width, height) < 450 ? 6 : 8;\n            lsaTime = 10;\n\n            // Create map for anonymized id to real id.\n            realUserIds = {};\n            users.forEach(function(u) {\n                realUserIds[u.id] = u.realId;\n            });\n\n            assignModuleColours();\n\n            if (useLSA) {\n                if (incoming.links.length > 0 && incoming.links[0].label) {\n                    // Rendering new LSA graph.\n                    lsaTime = 4000;\n                    presetNodes = {};\n                }\n\n                graphData = {\n                    nodes: incoming.nodecoords,\n                    links: incoming.links,\n                    edges: {},\n                    maxSession: 0\n                };\n\n                // Set up the links.\n                graphData.links.forEach(function(link) {\n                    link.source = graphData.nodes[link.source];\n                    link.target = graphData.nodes[link.target];\n                    link.colour = modColours.originalLinks;\n                });\n\n                // Set up the nodes.\n                var nodes = [];\n                var keys = Object.keys(graphData.nodes);\n                for (var i = 0; i < keys.length; i++) {\n\n                    // Might have data for a module that has been removed.\n                    if (!graphData.nodes[keys[i]].entype) {\n                        continue;\n                    }\n                    nodes[i] = graphData.nodes[keys[i]];\n                    nodes[i].colour = modColours[nodes[i].entype];\n                }\n                graphData.nodes = nodes;\n\n                if (positioning) {\n                    initPositioning();\n\n                } else {\n                    setTimeout(function() {\n                        makeStudentLinks();\n                        var h = makeClusterButton();\n                        makeGroupMenu();\n                        makeStudentMenu(h, true);\n                        makeTimeSlider();\n                    }, lsaTime + 100);\n\n                    doLSAGraph();\n                }\n                return;\n            }\n\n            getData();\n\n            if (replaying) {\n                doClusterReplay(incoming.manualdata);\n            } else if (positioning) {\n                initPositioning();\n            } else {\n                initGraphing();\n            }\n        }\n\n        /**\n         * Function to make a LSA graph.\n         */\n        function doLSAGraph() {\n\n            var xofs = width / 2.0;\n            var yofs = height / 2.0;\n\n            coordsData.originalx = xofs;\n            coordsData.originaly = yofs;\n\n            var nodes = graphData.nodes;\n            var links = graphData.links;\n\n            var linkForce = ddd.forceLink(links)\n                .distance(function(d) {\n                    return (1.0 / d.value) * 500;\n                });\n\n            // The actual graph.\n            graph = ddd.select('#graph')\n                .append('svg')\n                .attr('width', width)\n                .attr('height', height);\n\n            simulation = ddd.forceSimulation(nodes)\n                .force(\"link\", linkForce)\n                .force(\"charge\", ddd.forceManyBody().strength(-250))\n                .force(\"collide\", ddd.forceCollide().radius(30))\n                .force(\"center\", ddd.forceCenter(width / 2, height / 2))\n                .force('x', ddd.forceX())\n                .force('y', ddd.forceY());\n\n            // The nodes.\n            graphNodes = graph.selectAll(\".node\")\n                .data(nodes)\n                .enter().append(\"circle\")\n                .attr('class', 'node')\n                .attr(\"r\", nodeRadius)\n                .style('display', function(d) {\n                    return d.visible ? 'block' : 'none';\n                })\n                .on('mouseover', mouseover)\n                .on('mouseout', mouseout);\n\n            // The links.\n            graphLinks = graph.selectAll(\".link\")\n                .data(links)\n                .enter().append(\"line\")\n                .attr(\"class\", \"link\")\n                .style('stroke', modColours.originalLinks)\n                .style(\"stroke-width\", function(d) {\n                    return (d.value / 3) + 'px';\n                });\n\n            if (links.length > 0 && links[0].label) {\n                // Rendering new LSA graph.\n                simulation.on('tick', tick2);\n                setTimeout(function() {\n                    simulation.stop();\n                    sendCoordsToServer(links);\n                    coordsData.distance = coordsScale;\n                }, lsaTime);\n\n            } else {\n                // Graph has been rendered before.\n                simulation.on('tick', tick1);\n                setTimeout(function() {\n                    simulation.stop();\n                }, 100);\n            }\n        }\n\n        // Change english names to hex values.\n        /**\n         * Returns an array of select (darker) html colour names taken from\n         * https://www.w3schools.com/colors/colors_names.asp.\n         *\n         * @return {array}\n         */\n        function getColours() {\n\n            var c = ['aqua', 'blue', 'blueviolet', 'brown',\n                     'cadetblue', 'chartreuse', 'chocolate', 'coral', 'cornflowerblue',\n                     'crimson', 'cyan', 'darkblue', 'darkcyan', 'darkgoldenrod',\n                     'darkgrey', 'darkgreen', 'darkmagenta', 'darkolivegreen',\n                     'darkorange', 'darkorchid', 'darkred', 'darksalmon',\n                     'darkseagreen', 'darkslateblue', 'darkslategrey', 'darkturquoise',\n                     'darkviolet', 'deeppink', 'deepskyblue', 'dimgrey', 'dodgerblue',\n                     'firebrick', 'forestgreen', 'fuchsia', 'gold', 'goldenrod', 'grey',\n                     'green', 'greenyellow', 'hotpink', 'indianred', 'indigo', 'khaki',\n                     'lawngreen', 'lightblue', 'lightcoral', 'lightgreen',\n                     'lightpink', 'lightsalmon', 'lightseagreen', 'lightskyblue',\n                     'lightslategrey', 'lightsteelblue', 'lime', 'limegreen', 'magenta',\n                     'maroon', 'mediumaquamarine', 'mediumblue', 'mediumorchid',\n                     'mediumpurple', 'mediumseagreen', 'mediumslateblue',\n                     'mediumspringgreen', 'mediumturquoise', 'mediumvioletred',\n                     'midnightblue', 'navy', 'olive', 'olivedrab', 'orange', 'orangered',\n                     'orchid', 'palegreen', 'paleturquoise', 'palevioletred', 'peru',\n                     'plum', 'powderblue', 'purple', 'rebeccapurple', 'red', 'rosybrown',\n                     'royalblue', 'saddlebrown', 'salmon', 'sandybrown', 'seagreen',\n                     'sienna', 'silver', 'skyblue', 'slateblue', 'slategrey',\n                     'springgreen', 'steelblue', 'tan', 'teal', 'thistle', 'tomato',\n                     'turquoise', 'violet', 'yellow', 'yellowgreen'];\n            return c;\n        }\n\n        /**\n         * Ensure all module types have assigned colour. This will account for unknown\n         * module types.\n         */\n        function assignModuleColours() {\n\n            modules.forEach(function(m) {\n                while (!modColours[m.entype]) {\n\n                    // Pick random colour, but make sure it is not a duplicate.\n                    var c = colours[Math.floor(prng.random() * colours.length)];\n                    var isOKColour = true;\n\n                    for (var key in modColours) {\n                        if (modColours[key] == c) {\n                            isOKColour = false;\n                        }\n                    }\n                    modColours[m.entype] = isOKColour ? c : undefined;\n                }\n            });\n        }\n\n        /**\n         * Makes the node and link data from the information passed by the server.\n         */\n        function getData() {\n\n            graphData = {nodes: [], links: [], edges: {}, maxSession: 0};\n\n            makeNodeData();\n            makeStudentLinks();\n        }\n\n        /**\n         * Makes the node data for the graph and the link data for the links that\n         * connect the nodes to their sections.\n         */\n        function makeNodeData() {\n\n            var data = graphData;\n            var ob = {},\n                vis,\n                xc,\n                yc;\n\n            // Make nodes from modules.\n            modules.forEach(function(m) {\n\n                vis = true;\n                xc = undefined;\n                yc = undefined;\n\n                if (presetNodes[m.id]) {\n                    // Ensure group node visible as well, for new nodes.\n                    vis = presetNodes[m.id].visible &&\n                        presetNodes['g' + m.sect].visible ? 1 : 0;\n                    if (presetNodes[m.id].visible && !vis) {\n                        presetNodes[m.id].visible = 0;\n                    }\n                    xc = presetNodes[m.id].xcoord;\n                    yc = presetNodes[m.id].ycoord;\n\n                } else if (presetNodes['g' + m.sect]) {\n                    // New resource in course, but no node data.\n                    vis = presetNodes['g' + m.sect].visible &&\n                        userId == allsKey ? true : false;\n                }\n\n                data.nodes[data.nodes.length] = {\n                    id:      m.id,\n                    name:    m.name,\n                    group:   m.sect,\n                    type:    m.type,\n                    entype:  m.entype,\n                    colour:  modColours[m.entype],\n                    visible: vis,\n                    xcoord:  xc,\n                    ycoord:  yc\n                };\n\n                // Make nodes for grouping by section.\n                if (!ob[m.sect]) {\n                    if (presetNodes['g' + m.sect]) {\n\n                        vis = presetNodes['g' + m.sect].visible ? 1 : 0;\n                        xc = presetNodes['g' + m.sect].xcoord;\n                        yc = presetNodes['g' + m.sect].ycoord;\n                    }\n\n                    ob[m.sect] = {\n                        id:      'g' + m.sect,\n                        name:    langStrings.section + ' ' + m.sect,\n                        group:   m.sect,\n                        type:    'grouping',\n                        colour:  modColours.grouping,\n                        visible: vis,\n                        xcoord:  xc,\n                        ycoord:  yc\n                    };\n\n                    data.nodes[data.nodes.length] = ob[m.sect];\n                }\n\n                // Link module nodes to group nodes.\n                data.links[data.links.length] = {\n                    source: 'g' + m.sect,\n                    target: m.id,\n                    weight: defaultWeight,\n                    colour: modColours.originalLinks\n                };\n            });\n\n            xc = yc = undefined;\n\n            // Make root node for course.\n            if (presetNodes.root) {\n                xc = presetNodes.root.xcoord;\n                yc = presetNodes.root.ycoord;\n            }\n\n            var r = {\n                id:      'root',\n                name:    courseName,\n                group:   -1,\n                type:    'grouping',\n                colour:  modColours.grouping,\n                visible: 1,\n                xcoord:  xc,\n                ycoord:  yc\n            };\n\n            // Link other group nodes to root course node.\n            for (var o in ob) {\n                data.links[data.links.length] = {\n                    source: 'root',\n                    target: ob[o].id,\n                    weight: defaultWeight,\n                    colour: modColours.originalLinks\n                };\n            }\n\n            data.nodes[data.nodes.length] = r;\n\n            // When integrated with LORD plugin, make links between nodes instead\n            // of grouping by section to keep the graph consistent with LORD.\n            if (Object.keys(lordLinks).length > 0) {\n\n                var m1,\n                    m2,\n                    split;\n\n                for (var l in lordLinks) {\n                    split = l.split('_');\n                    m1 = split[0];\n                    m2 = split[1];\n\n                    data.links[data.links.length] = {\n                        source: m1,\n                        target: m2,\n                        weight: lordLinks[l] * 5.0,\n                        colour: modColours.originalLinks\n                    };\n                }\n\n                // Do not render grouping nodes, unless in positioning stage.\n                if (!originalPositioning) {\n                    for (var n in data.nodes) {\n                        if (isNaN(data.nodes[n].id)) {\n                            data.nodes[n].visible = 0;\n                        }\n                    }\n                }\n            }\n        }\n\n        /**\n         * Makes the student link data for the graph and finds max time slider value.\n         */\n        function makeStudentLinks() {\n\n            var data = graphData,\n                m = 0,\n                n = 0,\n                edge;\n            clickData = {};\n\n            // Go through the logs to make the student link sets.\n            for (var i = 0; i < logs.length; i++) {\n\n                edge = {\n                    source: logs[i].moduleId,\n                    target: logs[i].moduleId,\n                    weight: defaultWeight,\n                    user:   logs[i].userId,\n                    colour: \"\"\n                };\n                // Have not seen this user yet, create initial array.\n                if (!data.edges[logs[i].userId]) {\n\n                    data.edges[logs[i].userId] = [];\n                    clickData[logs[i].userId] = [];\n                    data.maxSession = data.maxSession < m ? m : data.maxSession;\n                    m = 0; n = 0;\n                }\n                if (presetNodes[logs[i].moduleId] && presetNodes[logs[i].moduleId].visible) {\n                    clickData[logs[i].userId][n++] = logs[i].moduleId;\n                }\n\n                // Make the link.\n                if (i + 1 < logs.length && logs[i].userId == logs[i + 1].userId) {\n\n                    edge.target = logs[i + 1].moduleId;\n                    data.edges[logs[i].userId][m++] = edge;\n\n                } else if (data.edges[logs[i].userId].length == 0) {\n                    // Student clicked only 1 thing, not enough to make a link, fake it.\n                    data.edges[logs[i].userId][m++] = edge;\n                }\n            }\n            data.maxSession = data.maxSession < m ? m : data.maxSession;\n\n            // Handle case where the user has no records.\n            users.forEach(function(u) {\n                if (!data.edges[u.id]) {\n                    data.edges[u.id] = [];\n                }\n            });\n        }\n\n        /**\n         * Function called for node positioning stage.\n         */\n        function initPositioning() {\n\n            graphing = false;\n\n            linkAlpha = 0.01;\n            dragAlpha = 0.01;\n\n            dragstartedFunc = dragstarted;\n            draggedFunc = dragged;\n            dragendedFunc = dragended;\n\n            // Have preset node coordinates to use for graph.\n            if (gotAllNodes && Object.keys(presetNodes).length > 0) {\n                defaultWeight = 0;\n            }\n\n            // Is user researcher?\n            if (allGraphs && allScales) {\n                makeTeacherMenu();\n            }\n\n            initGraph(0);\n            makeNodeLegend();\n            makeWeightControl();\n\n            setTimeout(function() {\n                simulation.force('charge', null)\n                    .force('x', null)\n                    .force('y', null);\n            }, 500);\n        }\n\n        /**\n         * This function renders the slider to control the link weights during\n         * the node positioning stage.\n         */\n        function makeWeightControl() {\n\n            var sm = document.getElementById('student-menu');\n\n            // The actual slider element.\n            var weightSlider = document.createElement('input');\n            weightSlider.id = 'weight-slider';\n            weightSlider.type = 'range';\n            weightSlider.min = '-0.2';\n            weightSlider.max = '1';\n            weightSlider.step = '0.2';\n            weightSlider.value = '0';\n            weightSlider.style.width = '130px';\n            weightSlider.addEventListener('change', function() {\n                linkForce.strength(this.value);\n                document.getElementById('weights-output').innerHTML = '&nbsp;= ' + this.value;\n            });\n            sm.appendChild(weightSlider);\n\n            // The label for the slider.\n            var text = document.createTextNode(langStrings.linksweight);\n            sm.appendChild(text);\n\n            text = document.createElement('label');\n            text.id = 'weights-output';\n            text.innerHTML = '&nbsp;= ' + weightSlider.value;\n            sm.appendChild(text);\n        }\n\n        /**\n         * Function called for regular graphing and clustering stage.\n         */\n        function initGraphing() {\n\n            graphing = true;\n            positioning = true;\n\n            linkAlpha = 0;\n\n            dragstartedFunc = null;\n            draggedFunc = null;\n            dragendedFunc = null;\n\n            // Trying to graph and cluster without configuring nodes first, give default.\n            if (!gotAllNodes || Object.keys(presetNodes).length == 0) {\n\n                initGraph(0.6);\n\n                setTimeout(function() {\n                    var h = makeClusterButton();\n                    makeGroupMenu();\n                    makeStudentMenu(h);\n                    makeTimeSlider();\n                }, 500);\n\n            } else {\n                // Already have preset nodes to work with.\n                var h = makeClusterButton();\n                makeGroupMenu();\n                makeStudentMenu(h);\n                initGraph(0);\n                makeTimeSlider();\n            }\n\n            linkForce = null;\n        }\n\n        /**\n         * Makes the basic initial graph.\n         *\n         * @param {number} strength - The strength value for the link force.\n         */\n        function initGraph(strength) {\n\n            // The actual graph.\n            graph = ddd.select('#graph')\n                .append('svg')\n                .attr('width', width)\n                .attr('height', height);\n\n            // The link force and simulation.\n            linkForce = ddd.forceLink(graphData.links)\n                .id(function(d) {\n                    return d.id;\n                })\n                .strength(strength);\n\n            simulation = ddd.forceSimulation(graphData.nodes)\n                .force(\"link\", linkForce)\n                .force(\"charge\", ddd.forceManyBody().strength(-80))\n                .force(\"collide\", ddd.forceCollide().radius(12))\n                .force(\"center\", ddd.forceCenter(width / 2, height / 2))\n                .force('x', ddd.forceX())\n                .force('y', ddd.forceY());\n\n            // The nodes.\n            makeNodes(graphData.nodes, rightClickFunc, dragstartedFunc, draggedFunc, dragendedFunc);\n\n            // The links.\n            makeLinks(graphData.links);\n\n            // Remove text boxes if user clicks anywhere else, mostly for right click pop-ups.\n            graph.on('click', function() {\n\n                // Remove the right click menu.\n                ddd.selectAll('#rctext').remove();\n                ddd.selectAll('#rcrect').remove();\n\n                // Replace mouse listeners.\n                if (graphing || positioning) {\n                    graphNodes\n                        .on('mouseover', mouseover)\n                        .on('mouseout', mouseout);\n                }\n                if (replaying) {\n                    graphNodes\n                        .on('mouseover', null)\n                        .on('mouseout', null);\n                }\n            });\n\n            // Assign initial tick function.\n            if (gotAllNodes && positioning &&\n                       Object.keys(presetNodes).length > 0) {\n                simulation.on('tick', tick1);\n            } else {\n                simulation.on('tick', tick2);\n            }\n\n            // Advance the graph a little so it needs to move less at start.\n            for (var i = 0; i < 80; i++) {\n                simulation.tick();\n            }\n\n            // Stop simulation and switch tick functions.\n            if (positioning) {\n                setTimeout(function() {\n\n                    simulation.stop();\n                    simulation.on('tick', tick2);\n                    drawTime();\n\n                    // If we have no preset coords for this course, make some.\n                    if (Object.keys(presetNodes).length == 0 || !gotAllNodes) {\n                        sendCoordsToServer(null);\n                        graphData.edges = {};\n                        makeStudentLinks();\n                        gotAllNodes = true;\n                        defaultWeight = graphing ? 1 : 0;\n                    }\n                }, 500);\n            }\n\n            // Ensure any newly introduced nodes are rendered properly.\n            if (graphing && !gotAllNodes) {\n                setTimeout(function() {\n                    graphData.nodes = [];\n                    graphData.links = [];\n                    makeNodeData();\n                }, 600);\n            }\n        }\n\n        /**\n         * Function to make the nodes for the graph.\n         *\n         * @param {array} nodes - The nodes data\n         * @param {function} rclick - Right click function to assign to the nodes\n         * @param {function} dstart - Drag started function\n         * @param {function} drag - Dragging function\n         * @param {function} dend - Drag ended function\n         */\n        function makeNodes(nodes, rclick, dstart, drag, dend) {\n\n            graphNodes = graph.selectAll(\".node\")\n                .data(nodes)\n                .enter().append(\"circle\")\n                .attr('class', 'node')\n                .attr(\"r\", nodeRadius)\n                .style('display', function(d) {\n                    return d.visible ? 'block' : 'none';\n                })\n                .on('mouseover', mouseover)\n                .on('mouseout', mouseout)\n                .on('contextmenu', rclick)\n                .call(ddd.drag()\n                      .on('start', dstart)\n                      .on('drag', drag)\n                      .on('end', dend));\n        }\n\n        /**\n         * Function to make the links for the graph.\n         *\n         * @param {array} links - The link data\n         */\n        function makeLinks(links) {\n\n            graphLinks = graph.selectAll(\".link\")\n                .data(links)\n                .enter().append(\"line\")\n                .attr(\"class\", \"link\")\n                .style('stroke', function(d) {\n                    return d.colour;\n                })\n                .style(\"stroke-width\", function(d) {\n                    if (d.weight) {\n                        return (d.weight * 2) + 'px';\n                    } else {\n                        return (d.value / 3) + 'px';\n                    }\n                });\n        }\n\n        /**\n         * Event listener for mouse hovering over nodes. Shows the text box and iframe preview.\n         *\n         * @param {object} node - Node that is dragged\n         * @param {boolean} keepText - Flag to keep text on screen or not\n         */\n        function mouseover(node, keepText) {\n\n            if (noNodeMouse) {\n                return;\n            }\n\n            graphNodes.on('mouseover', null);\n\n            if (keepText === false) {\n                ddd.selectAll('.text').remove();\n                ddd.selectAll('rect').remove();\n            }\n\n            // Fixes a bug where text box shows even though it should not.\n            if (Date.now() - dragEndTime < 150) {\n                return;\n            }\n\n            var rtrn = [0],\n                up = false,\n                left = false,\n                right = false;\n            var rwidth = 150,\n                ifwidth = 304,\n                ifheight = 154;\n            var txt = node.type + ': ' + node.name;\n\n            if (iframeStaticPos) {\n                ifwidth = 0;\n                ifheight = 0;\n            }\n\n            // Make the text.\n            var t = graph.append('text')\n                .attr('class', 'text')\n                .attr('id', 't-' + node.id)\n                .attr('y', node.y + 32)\n                .attr('dy', '.40em')\n                .style('pointer-events', 'none')\n                .text(txt)\n                .call(wrap, rwidth, node.x - (rwidth + 6) / 2 + 8, rtrn);\n\n            // Get rectangle height.\n            var rh = rtrn[0] * 16 + 16;\n\n            // If node near bottom of graph area, move text above node.\n            if (rh + node.y >= height - ifheight) {\n                t.attr('y', height - rh - (height - node.y))\n                    .text(txt)\n                    .call(wrap, rwidth, node.x - (rwidth + 6) / 2 + 8, rtrn);\n                up = true;\n            }\n\n            // Move if near right or left edge.\n            if (node.x <= ifwidth / 2) {\n                t.text(txt).call(wrap, rwidth, node.x + 8, rtrn);\n                right = true;\n            } else if (node.x >= width - ifwidth / 2) {\n                t.text(txt).call(wrap, rwidth, node.x - (rwidth + 6) + 8, rtrn);\n                left = true;\n            }\n\n            // Make the rectange background.\n            var attrX;\n            if (right) {\n                attrX = node.x;\n            } else if (left) {\n                attrX = node.x - (rwidth + 6);\n            } else {\n                attrX = node.x - (rwidth + 6) / 2;\n            }\n\n            var r = graph.append('rect')\n                .attr('id', 'r-' + node.id)\n                .attr('x', attrX)\n                .attr('y', up ? height - rh - 16 - (height - node.y) : node.y + 16)\n                .attr('width', rwidth + 16)\n                .attr('height', rh)\n                .style('stroke', 'black')\n                .style('fill', 'yellow');\n\n            t.raise();\n\n            // Only for module nodes, not section nodes, show page preview.\n            if (!isNaN(node.id)) {\n\n                if (iframeStaticPos) {\n                    ifwidth = 400;\n                    ifheight = 300;\n                }\n                makeIframe(node, rh, rwidth, ifwidth, ifheight, up, right, left,\n                           parseInt(r.attr('x')), parseInt(r.attr('y')));\n            }\n        }\n\n        /**\n         * Called to wrap long text into predefined width.\n         * Adapted from https://bl.ocks.org/mbostock/7555321\n         *\n         * @param {string} text - The text to wrap\n         * @param {number} rectWidth - The predefined width\n         * @param {number} xOffset - The offset of the x value\n         * @param {array} rtrn - Stores the return value\n         */\n        function wrap(text, rectWidth, xOffset, rtrn) {\n\n            var lineNumber = 0;\n\n            text.each(function() {\n\n                // The variables needed.\n                var text = ddd.select(this),\n                    words = text.text().split(/\\s+/).reverse(),\n                    word,\n                    line = [],\n                    lineHeight = 1.1, // In ems.\n                    y = text.attr(\"y\"),\n                    dy = parseFloat(text.attr(\"dy\"));\n\n                var tspan = text.text(null)\n                    .append(\"tspan\")\n                    .attr(\"x\", xOffset)\n                    .attr(\"y\", y)\n                    .attr(\"dy\", dy + \"em\");\n\n                // While there are words to wrap.\n                word = words.pop();\n                while (word) {\n\n                    line.push(word);\n                    tspan.text(line.join(\" \"));\n\n                    // If the length of the line is too long.\n                    if (tspan.node().getComputedTextLength() > rectWidth) {\n\n                        line.pop();\n                        tspan.text(line.join(\" \"));\n\n                        line = [word];\n\n                        tspan = text.append(\"tspan\")\n                            .attr(\"x\", xOffset)\n                            .attr(\"y\", y)\n                            .attr(\"dy\", (++lineNumber * lineHeight + dy) + \"em\")\n                            .text(word);\n                    }\n                    word = words.pop();\n                }\n            });\n\n            rtrn[0] = ++lineNumber;\n        }\n\n        /**\n         * Function to make an iframe preview for a module node.\n         *\n         * @param {number} node - The module id of the associated node\n         * @param {number} rectH - The height of the node's text box\n         * @param {number} rectW - The width of the nodes text box\n         * @param {number} ifwidth - Iframe width\n         * @param {number} ifheight - Iframe height\n         * @param {boolean} up - If node near bottom, move up\n         * @param {boolean} right - If node near left side, move right\n         * @param {boolean} left - If node near right side, move left\n         * @param {number} rectX - Rectangle background x coordinate value\n         * @param {number} rectY - Rectangle background y coordinate value\n         */\n        function makeIframe(node, rectH, rectW, ifwidth, ifheight, up, right, left, rectX, rectY) {\n\n            // Create the iframe.\n            var iframe = document.createElement('iframe');\n            iframe.id = 'preview';\n\n            iframe.style.position = 'absolute';\n            iframe.style.width = ifwidth + 'px';\n            iframe.style.height = ifheight + 'px';\n\n            // Position relative to the node and text box considering the window offset of the graph.\n            var gbb = document.getElementsByTagName('svg')[0].getBoundingClientRect();\n            // ... and the body offset in the page.\n            var bbb = document.body.getBoundingClientRect();\n\n            // Fixes bug where iframe too low when page scrolled to top.\n            if (bbb.x > 0) {\n                bbb.x = 0;\n            }\n\n            // Iframe may be placed statically at right side or statically at left side\n            // or need to move right or left or remain centered.\n            if (iframeRight) {\n                iframe.style.left = (window.innerWidth - 10 - ifwidth) + 'px';\n            } else if (iframeStaticPos) {\n                iframe.style.left = '10px';\n            } else if (right) {\n                iframe.style.left = (rectX + gbb.x) + 'px';\n            } else if (left) {\n                iframe.style.left = (rectX + gbb.x + rectW - ifwidth + 18) + 'px';\n            } else {\n                iframe.style.left = (rectX + gbb.x - (ifwidth / 2) + (rectW / 2)) + 'px';\n            }\n\n            var yoffset = version36 ? 0 : 50;\n\n            // May need to be placed statically or moved up or remain under.\n            if (iframeStaticPos) {\n                iframe.style.top = (gbb.y - bbb.y + (height / 2)) + 'px';\n            } else if (up) {\n                iframe.style.top = (yoffset + rectY + gbb.y - bbb.y - ifheight) + 'px';\n            } else {\n                iframe.style.top = (yoffset + rectY + gbb.y + rectH - bbb.y) + 'px';\n            }\n\n            // Make the iframe preview, unless it is an external resource. These cause\n            // a new window to open with error, causing problems MATH215.\n            if (node.entype != 'lti' && node.type != 'unknown') {\n\n                // First a background to attach listeners to the iframe.\n                var bgrnd = document.createElement('div');\n                bgrnd.id = 'bgrnd';\n                bgrnd.style.position = 'absolute';\n\n                // Position background so there is a border around iframe, 12px.\n                bgrnd.style.width = (parseInt(iframe.style.width) + 24) + 'px';\n                bgrnd.style.height = (parseInt(iframe.style.height) + 24) + 'px';\n                bgrnd.style.left = (parseInt(iframe.style.left) - 12) + 'px';\n                bgrnd.style.top = (parseInt(iframe.style.top) - 12) + 'px';\n\n                // Mouse leaves border, could be in or out of iframe.\n                bgrnd.addEventListener('mouseout', function(m) {\n\n                    var b = this.getBoundingClientRect();\n\n                    // Check mouse position against border bounds.\n                    if (m.x > b.x && m.x < b.x + b.width && m.y > b.y && m.y < b.y + b.height) {\n                        return;\n                    }\n\n                    // Mouse is outside of border and iframe, remove them.\n                    inIframe = false;\n                    setTimeout(removeIframes, 400);\n                });\n\n                // When mouse moves over border, keep iframe visible.\n                bgrnd.addEventListener('mouseover', function() {\n                    inIframe = true;\n                });\n\n                // The iframe is on top so it can be scrolled.\n                iframe.src = iframeURL + 'mod/' + node.entype + '/view.php?id=' + node.id;\n                document.body.appendChild(bgrnd);\n                document.body.appendChild(iframe);\n            }\n        }\n\n        /**\n         * Event listener for mouse moving out of nodes. Sets a timeout to remove\n         * the text box and iframe, unless the mouse is in the iframe, then it gets\n         * left on screen until the mouse is out of the iframe.\n         *\n         * @param {object} obj - Node or link that is listening for the event\n         */\n        function mouseout(obj) {\n\n            // Ignore if asked or mouseout over section link.\n            if (noNodeMouse || obj.colour == 'lightgrey') {\n                return;\n            }\n\n            // Do not call this function again as the mouse moves.\n            graphNodes.on('mouseout', null);\n            graphLinks.on('mouseout', null);\n\n            setTimeout(removeIframes, 400);\n        }\n\n        /**\n         * Called to remove iframe previews and replace listeners.\n         */\n        function removeIframes() {\n\n            if (inIframe) {\n                return;\n            }\n            // Remove text boxes and iframes.\n            ddd.selectAll('.text').remove();\n            ddd.selectAll('rect').remove();\n            ddd.selectAll('#preview').remove();\n            ddd.selectAll('#bgrnd').remove();\n\n            // Replace node listeners.\n            graphNodes\n                .on('mouseover', mouseover)\n                .on('mouseout', mouseout);\n\n            if (iframeStaticPos) {\n                // Replace link listeners.\n                graphLinks\n                    .on('mouseover', linkMouseover)\n                    .on('mouseout', mouseout);\n\n                // Replace centroid listeners.\n                for (var i = 0; i < centroids.length; i++) {\n                    ddd.select('#cluster1-' + i)\n                        .on('mouseover', clusteroidMouseover.bind(this, i, false));\n                    ddd.select('#cluster2-' + i)\n                        .on('mouseover', clusteroidMouseover.bind(this, i, false));\n                }\n            }\n        }\n\n        /**\n         * Initial simulation tick function for when graph is rendered statically\n         * with coordinate values taken from server database. Adapted from\n         * https://stackoverflow.com/questions/28102089/simple-graph-of-nodes-\n         * and-links-without-using-force-layout\n         */\n        function tick1() {\n\n            // Distance and coordinate offsets for scaling to screen space from\n            // coordinates stored in server database.\n            var xofs = width / 2.0;\n            var yofs = height / 2.0;\n            var dist = coordsScale;\n\n            if (coordsData.originalx === undefined) {\n                coordsData.originalx = xofs;\n                coordsData.originaly = yofs;\n            } else {\n                xofs = coordsData.originalx;\n                yofs = coordsData.originaly;\n            }\n\n            // Ensure scale value is okay, reduce if not.\n            for (var i = 0, sx, sy; i < graphData.nodes.length; i++) {\n\n                sx = graphData.nodes[i].xcoord * dist + xofs;\n                sy = graphData.nodes[i].ycoord * dist + yofs;\n\n                if (sx < 0 || sx > width || sy < 0 || sy > height) {\n\n                    dist *= 0.9;\n                    --i;\n                }\n            }\n            // Store the values for later.\n            coordsScale = dist;\n            coordsData.distance = dist;\n\n            // Ensure links are positioned correctly.\n            graphLinks\n                .attr(\"x1\", function(l) {\n\n                    var sourceNode = graphData.nodes.filter(function(d) {\n                        var sid = typeof l.source == 'string' ? l.source : l.source.id;\n                        return d.id == sid;\n                    })[0];\n\n                    ddd.select(this).attr(\"y1\", (sourceNode.ycoord * dist) + yofs);\n                    return (sourceNode.xcoord * dist) + xofs;\n                })\n                .attr(\"x2\", function(l) {\n\n                    var targetNode = graphData.nodes.filter(function(d) {\n                        var tid = typeof l.target == 'string' ? l.target : l.target.id;\n                        return d.id == tid;\n                    })[0];\n\n                    ddd.select(this).attr(\"y2\", (targetNode.ycoord * dist) + yofs);\n                    return (targetNode.xcoord * dist) + xofs;\n                })\n                .style('display', function(d) {\n                    return (!d.source.visible || !d.target.visible) ? 'none' : 'block';\n                });\n\n            // Give nodes the preset coordinates, scaled to current screen.\n            graphNodes\n                .attr('cx', function(d) {\n                    d.x = (d.xcoord * dist) + xofs;\n                    return d.x;\n                })\n                .attr('cy', function(d) {\n                    d.y = (d.ycoord * dist) + yofs;\n                    return d.y;\n                })\n                .style('display', function(d) {\n                    return d.visible ? 'block' : 'none';\n                })\n                .style('fill', function(d) {\n                    return d.colour;\n                })\n                .raise();\n        }\n\n        /**\n         * Secondary simulation tick function for use during the positioning of the nodes.\n         */\n        function tick2() {\n\n            var radius = nodeRadius;\n\n            // Basic link function to move links with nodes.\n            graphLinks\n                .attr(\"x1\", function(d) {\n                    return d.source.x;\n                })\n                .attr(\"y1\", function(d) {\n                    return d.source.y;\n                })\n                .attr(\"x2\", function(d) {\n                    return d.target.x;\n                })\n                .attr(\"y2\", function(d) {\n                    return d.target.y;\n                })\n                .style(\"stroke-width\", function(d) {\n                    if (d.weight) {\n                        return (d.weight * 2) + 'px';\n                    } else {\n                        return (d.value / 3) + 'px';\n                    }\n                })\n                .style(\"display\", function(d) {\n                    return d.source.visible && d.target.visible ? 'block' : 'none';\n                });\n\n            // Keep nodes on screen when dragging.\n            graphNodes\n                .attr(\"cx\", function(d) {\n                    d.x = Math.max(radius, Math.min(width - radius, d.x));\n                    return d.x;\n                })\n                .attr(\"cy\", function(d) {\n                    d.y = Math.max(radius, Math.min(height - radius, d.y));\n                    return d.y;\n                })\n                .style('fill', function(d) {\n                    return d.colour;\n                })\n                .style(\"display\", function(d) {\n                    return d.visible ? 'block' : 'none';\n                })\n                .raise();\n\n            // Raise for proper visual presentation.\n            ddd.selectAll('rect').raise();\n            ddd.selectAll('text').raise();\n        }\n\n        /**\n         * Function to draw the last time updated during the positioning stage.\n         */\n        function drawTime() {\n\n            if (!allNames) {\n                return;\n            }\n\n            ddd.select('#time').remove();\n\n            if (lastChange == 0) {\n                lastChange = Date.now();\n            }\n\n            // Make the date from milliseconds timestamp.\n            var t = new Date();\n            t.setTime(lastChange);\n\n            // Ensure minutes is two digits.\n            var mins = t.getMinutes();\n            if (mins < 10) {\n                mins = '0' + mins;\n            }\n\n            // Draw the time.\n            graph.append('text')\n                .attr('id', 'time')\n                .attr('y', height - 16)\n                .attr('dy', '.40em')\n                .attr('x', 6)\n                .style('pointer-events', 'none')\n                .text(allNames[allsKey] + ' ' + t.getHours() + ':' + mins + ' ' + t.toDateString());\n        }\n\n        /**\n         * Called to send the module node coordinates to the server. This will also\n         * update other arrays used in conjunction with the researcher interface.\n         *\n         * @param {object} links - The LSA graph has links that need to be stored.\n         */\n        function sendCoordsToServer(links) {\n\n            // Get normalized coordinates.\n            var normalized = normalizeNodes();\n            if (links) {\n                normalized.links = links;\n            }\n\n            // If user is researcher, update their nodes as well.\n            if (allGraphs && allScales) {\n\n                // Update the nodes.\n                allScales[userId] = normalized.scale;\n                allGraphs[userId] = normalized.nodes;\n            }\n\n            // Set the last changed time stamp.\n            normalized.time = Date.now();\n            lastChange = normalized.time;\n\n            // Update researcher's changed time.\n            if (allChanges) {\n                allChanges[userId] = normalized.time;\n            }\n\n            // Update the nodes at the server.\n            callServer(coordsScript, normalized);\n        }\n\n        /**\n         * Called to normalize the coordinates of the module nodes.\n         *\n         * @return {object}\n         */\n        function normalizeNodes() {\n\n            var normalized = {};\n            var dx,\n                dy,\n                d,\n                max = 0,\n                cx = width / 2,\n                cy = height / 2;\n\n            // Find node with greatest distance from centre.\n            graphData.nodes.forEach(function(dn) {\n\n                dx = dn.x - cx;\n                dy = dn.y - cy;\n                d = Math.sqrt(dx * dx + dy * dy);\n\n                if (d > max) {\n                    max = d;\n                }\n            });\n\n            // Store distance and node that was used.\n            coordsScale = max;\n\n            // Normalize all nodes based on greatest distance.\n            graphData.nodes.forEach(function(dn) {\n\n                normalized[dn.id] = {\n                    'xcoord': '' + ((dn.x - cx) / max),\n                    'ycoord': '' + ((dn.y - cy) / max),\n                    'visible': dn.visible,\n                };\n\n                // If trying to view graph with no preset nodes, make them.\n                if (!dn.xcoord) {\n                    dn.xcoord = (dn.x - cx) / max;\n                    dn.ycoord = (dn.y - cy) / max;\n                }\n            });\n\n            presetNodes = normalized;\n            return {\n                nodes: normalized,\n                scale: max,\n            };\n        }\n\n        /**\n         * Function called to send data to server.\n         *\n         * @param {string} url - The name of the file receiving the data\n         * @param {object} outData - The data to send to the server\n         */\n        function callServer(url, outData) {\n\n            var req = new XMLHttpRequest();\n            req.open('POST', url);\n            req.setRequestHeader('Content-type', 'application/x-www-form-urlencoded');\n\n            req.onreadystatechange = function() {\n                if (this.readyState == 4 && this.status == 200) {\n                    // Log console.log(this.responseText); to console?\n                }\n            };\n            // Ampersands, possible in comments and analysis name, cause issues in POST and GET, encode it.\n            var encoded = JSON.stringify(outData);\n            if (url == commentsScript) {\n                encoded = encoded.replaceAll('&', '%amp;');\n            }\n            req.send('cid=' + courseId + '&data=' + encoded + '&sesskey=' + sessionKey);\n        }\n\n        /**\n         * Called to make the teacher select menu on the positioning screen. The menu\n         * is part of the researcher interface.\n         */\n        function makeTeacherMenu() {\n\n            // Left panel menu.\n            var sm = document.getElementById('student-menu');\n            var div = document.createElement('div');\n\n            // Copy button.\n            var copy = document.createElement('button');\n            copy.innerHTML = langStrings.copy;\n            copy.className = \"btn btn-secondary mb-1\";\n            copy.addEventListener('click', copyGraph);\n            div.appendChild(copy);\n\n            var bHeight = copy.getBoundingClientRect().height;\n\n            // Print button.\n            var print = document.createElement('button');\n            print.innerHTML = langStrings.print;\n            print.className = \"btn btn-secondary mb-1\";\n            print.addEventListener('click', printGraph);\n            div.appendChild(print);\n            sm.appendChild(div);\n\n            // Teacher multiple select menu.\n            teacherMenu = document.createElement('select');\n            teacherMenu.size = 3;\n            teacherMenu.id = 'teacher-select';\n            teacherMenu.style.minWidth = '40px';\n\n            var menuHeight = height - bHeight - 80;\n            teacherMenu.style.height = menuHeight + 'px';\n            teacherMenu.addEventListener('change', changeGraph);\n\n            // Add users to the teacher menu.\n            for (var key in allScales) {\n\n                var o = document.createElement('option');\n                o.value = key;\n                o.text = key;\n\n                if (userId == key) {\n                    o.selected = true;\n                }\n                teacherMenu.appendChild(o);\n            }\n\n            sm.appendChild(teacherMenu);\n        }\n\n        /**\n         * Event listener for graph copy button during node positioning. Adapted from\n         * https://stackoverflow.com/questions/11567668/svg-to-canvas-\n         * with-d3-js/23667012#23667012 and\n         * https://bl.ocks.org/dvreed77/c37759991b0723eebef3647015495253. Button is\n         * only available with the researcher interface.\n         */\n        function copyGraph() {\n\n            var img = new Image(),\n                serializer = new XMLSerializer(),\n                svgStr = serializer.serializeToString(graph.node());\n\n            img.src = 'data:image/svg+xml;base64,' + window.btoa(svgStr);\n            document.body.appendChild(img);\n\n            var r = document.createRange();\n            r.setStartBefore(img);\n            r.setEndAfter(img);\n            r.selectNode(img);\n\n            var sel = window.getSelection();\n            sel.addRange(r);\n\n            document.execCommand('Copy');\n\n            document.body.removeChild(img);\n        }\n\n        /**\n         * Event listener for print graph button during node positioning. The button\n         * is only available with the researcher interface.\n         */\n        function printGraph() {\n\n            var serializer = new XMLSerializer(),\n                svgStr = serializer.serializeToString(graph.node());\n\n            var mywindow = window.open();\n            mywindow.document.write('<img src=\"' + 'data:image/svg+xml;base64,' +\n                                    window.btoa(svgStr) + '\"/>');\n            mywindow.print();\n            mywindow.close();\n        }\n\n        /**\n         * Event listener for teacher select menu, which is part of the researcher\n         * interface. This function ensures that the researcher can manipulate their\n         * own graph, but not the graphs of others.\n         */\n        function changeGraph() {\n\n            // Figure out which menu item is selected.\n            var sel = document.getElementById('teacher-select');\n            var key;\n\n            for (var j = 0; j < sel.options.length; j++) {\n                if (sel.options[j].selected) {\n                    key = sel.options[j].value;\n                    break;\n                }\n            }\n\n            // Allow researcher to manipulate their own graph.\n            if (key == userId) {\n                dragstartedFunc = dragstarted;\n                draggedFunc = dragged;\n                dragendedFunc = dragended;\n                rightClickFunc = rightClick;\n            } else {\n                // ... but not anyone elses.\n                dragstartedFunc = null;\n                draggedFunc = null;\n                dragendedFunc = null;\n                rightClickFunc = null;\n            }\n\n            // Change the preset nodes and scales.\n            presetNodes = allGraphs[key];\n            lordLinks = allLinks[key];\n            coordsScale = allScales[key];\n            lastChange = allChanges[key];\n            modules = allMods[key];\n            courseName = allSetNames[key];\n            allsKey = key;\n\n            // Redo the graph and legend.\n            graph.remove();\n            nodeBoxes = {};\n            assignModuleColours();\n            ddd.selectAll('#legendUL').remove();\n            makeNodeLegend();\n\n            useLSA = 0;\n            if (lordLinks.length > 0 && lordLinks[0].value) {\n                // This is an LSA graph.\n                var nodes = [];\n                var keys = Object.keys(presetNodes);\n\n                for (var i = 0; i < keys.length; i++) {\n                    nodes[i] = presetNodes[keys[i]];\n                    nodes[i].colour = modColours[nodes[i].entype];\n                }\n                for (var link in lordLinks) {\n                    lordLinks[link].colour = modColours.originalLinks;\n                }\n\n                graphData = {nodes: nodes, links: lordLinks, edges: {}, maxSession: 0};\n                useLSA = 1;\n\n            } else {\n                // Need default weight at 1 to render links.\n                defaultWeight = 1.0;\n                getData();\n                defaultWeight = 0;\n            }\n\n            // Get the current link weight value for the graph.\n            var currentWeight = document.getElementById('weights-output').innerHTML;\n            currentWeight = parseFloat(currentWeight.split(\" \")[1]);\n            initGraph(currentWeight);\n\n            // Check or uncheck node legend boxes as needed.\n            for (var nodeKey in nodeBoxes) {\n                if (presetNodes[nodeKey]) {\n                    nodeBoxes[nodeKey].checked = presetNodes[nodeKey].visible ? true : false;\n                }\n\n                // Allow researcher to manipulate their graph, but not anyone elses.\n                if (userId == key) {\n                    nodeBoxes[nodeKey].removeEventListener('change', keepChecked);\n                    nodeBoxes[nodeKey].addEventListener('change', legendChange);\n                } else {\n                    nodeBoxes[nodeKey].removeEventListener('change', legendChange);\n                    nodeBoxes[nodeKey].addEventListener('change', keepChecked);\n                }\n            }\n        }\n\n        /**\n         * Event listener for legend when researcher is viewing another's graph.\n         * This keeps the checkboxes from being changed.\n         */\n        function keepChecked() {\n            this.checked = !this.checked;\n        }\n\n        /**\n         * Called to make the hiearchical node legend on the main graphing screen.\n         */\n        function makeNodeLegend() {\n\n            // Hierarchical legend.\n            var maxWidth = 500,\n                mpos;\n            nodeLegend = document.getElementById('legend');\n            nodeLegend.style.width = legendWidth + 'px';\n            nodeLegend.style.height = height + 'px';\n            nodeLegend.style.minWidth = legendWidth + 'px';\n            nodeLegend.style.maxWidth = maxWidth + 'px';\n            nodeLegend.style.marginTop = incoming.version40 ? '200px' : '50px';\n\n            // Allow legend to be resized.\n            // Adapted from https://stackoverflow.com/questions/26233180/resize-a-\n            // div-on-border-drag-and-drop-without-adding-extra-markup.\n\n            // Reshape mouse pointer when over left legend edge.\n            var legendMove = function(e) {\n\n                var wd = nodeLegend.offsetLeft;\n                if (!incoming.version36) {\n                    wd += 28;\n                }\n\n                if (e.x >= wd && e.x <= wd + 6) {\n                    nodeLegend.style.cursor = 'col-resize';\n                } else {\n                    nodeLegend.style.cursor = 'auto';\n                }\n            };\n\n            // Resize the legend within bounds.\n            var legendResize = function(e) {\n\n                var dx = mpos - e.x;\n                mpos = e.x;\n\n                var newWidth = parseInt(nodeLegend.style.width) + dx;\n\n                if (newWidth > maxWidth) {\n                    newWidth = maxWidth;\n                } else if (newWidth < legendWidth) {\n                    newWidth = legendWidth;\n                }\n\n                nodeLegend.style.width = newWidth + \"px\";\n            };\n\n            // Add the event listeners.\n            nodeLegend.addEventListener('mousemove', legendMove);\n\n            nodeLegend.addEventListener('mousedown', function(e) {\n\n                mpos = e.x;\n\n                if (nodeLegend.style.cursor == 'col-resize') {\n                    nodeLegend.addEventListener('mousemove', legendResize);\n                }\n            });\n\n            document.addEventListener('mouseup', function() {\n                nodeLegend.removeEventListener('mousemove', legendResize);\n            });\n\n            // Make the hiearchical legend.\n            makeLegend(nodeLegend);\n        }\n\n        /**\n         * Make the hierarchical node legend during the node positioning stage.\n         * Adapted from https://www.w3schools.com/howto/howto_js_treeview.asp.\n         *\n         * @param {HTMLElement} parent - The parent to append to\n         */\n        function makeLegend(parent) {\n\n            // Root of the tree, contains the course title.\n            var root = document.createElement('ul');\n            root.id = 'legendUL';\n\n            var rootSpan = document.createElement('span');\n            rootSpan.className = 'no-select-text';\n            rootSpan.innerHTML = courseName;\n\n            var rootLI = document.createElement('li');\n            rootLI.appendChild(rootSpan);\n\n            var rootUL = document.createElement('ul');\n            rootLI.appendChild(rootUL);\n            root.appendChild(rootLI);\n\n            var li,\n                ul,\n                span,\n                section = -1;\n\n            // Sort the modules to ensure all sections are together.\n            modules.sort(function(a, b) {\n                return a.sect - b.sect;\n            });\n\n            // Need a checkbox for each module node, grouped by section.\n            modules.forEach(function(m) {\n\n                // Each section gets an expandable checkbox.\n                if (section != m.sect) {\n\n                    ul = document.createElement('ul');\n                    ul.className = 'nested';\n\n                    span = document.createElement('span');\n                    span.className = 'caret';\n                    span.addEventListener('click', expand);\n\n                    li = document.createElement('li');\n                    li.appendChild(span);\n\n                    getCheckbox('g' + m.sect, langStrings.section + ' ' + m.sect,\n                                modColours.grouping, m.sect, 'grouping', li);\n\n                    li.appendChild(ul);\n                    rootUL.appendChild(li);\n\n                    section = m.sect;\n                }\n\n                // Each module gets attached to its expandable section.\n                li = document.createElement('li');\n                li.className = 'indented';\n\n                getCheckbox(m.id, m.name, modColours[m.entype], m.sect, m.type, li);\n\n                ul.appendChild(li);\n            });\n\n            parent.appendChild(root);\n        }\n\n        /**\n         * Resize function for hierarchical node legend.\n         */\n        function expand() {\n            this.parentElement.querySelector(\".nested\").classList.toggle(\"active\");\n            this.classList.toggle(\"caret-down\");\n        }\n\n        /**\n         * Gets a checkbox with label for the hierarchical node legend.\n         *\n         * @param {number} mid - The module id\n         * @param {string} name - The label text\n         * @param {string} colour - The colour of associated node\n         * @param {string} group - The group the box belongs to\n         * @param {string} nodeType - The type of node\n         * @param {HTMLElement} parent - The parent element to append to\n         */\n        function getCheckbox(mid, name, colour, group, nodeType, parent) {\n\n            // Make the checkbox.\n            var box = document.createElement('input');\n            box.type = 'checkbox';\n\n            // Check/uncheck based on node visibility from server.\n            if (presetNodes[mid]) {\n                box.checked = presetNodes[mid].visible ? true : false;\n            } else if (presetNodes['g' + group]) {\n                // New resource in course, but no node data.\n                box.checked = presetNodes['g' + group].visible &&\n                    userId == allsKey ? true : false;\n            } else {\n                // No node coordinates from server, default graph, everything visible.\n                box.checked = true;\n            }\n            box.id = mid;\n            box.group = group;\n            box.nodeT = nodeType;\n            box.addEventListener('change', legendChange);\n\n            // Store the checkbox.\n            nodeBoxes[box.id] = box;\n\n            // Make the label.\n            var label = document.createElement('label');\n            label.style.color = colour;\n            label.className = 'no-select-text';\n            var labelText = nodeType == 'grouping' ? name : nodeType + '_' + name;\n            label.appendChild(document.createTextNode(labelText));\n\n            parent.appendChild(box);\n            parent.appendChild(label);\n        }\n\n        /**\n         * Event listener for legend when clicking checkboxes to show/hide nodes.\n         */\n        function legendChange() {\n\n            // Store the attributes for this checkbox.\n            var thisId = this.id,\n                thisChecked = this.checked,\n                thisType = this.nodeT,\n                thisGroup = this.group;\n\n            // Show/hide nodes.\n            graphData.nodes.forEach(function(dn) {\n\n                // Hide individually clicked nodes.\n                if (dn.id == thisId) {\n                    dn.visible = thisChecked ? 1 : 0;\n                    nodeBoxes[dn.id].checked = thisChecked;\n\n                } else if (thisType == 'grouping' && dn.group == thisGroup) {\n                    // Hide all nodes when group checkbox clicked.\n                    dn.visible = thisChecked ? 1 : 0;\n                    nodeBoxes[dn.id].checked = thisChecked;\n\n                } else if (thisChecked && dn.type == 'grouping' && dn.group == thisGroup) {\n                    // Recheck group checkbox if individual module checkbox checked.\n                    dn.visible = thisChecked ? 1 : 0;\n                    nodeBoxes[dn.id].checked = thisChecked;\n                }\n            });\n\n            checkWeight();\n            drawGraph();\n        }\n\n        /**\n         * Called to ensure that the weight is not negative before drawing the\n         * graph. Negative weight can cause graph to explode out of screen.\n         */\n        function checkWeight() {\n\n            var weight = parseFloat(document.getElementById('weight-slider').value);\n\n            if (weight < 0) {\n                linkForce.strength(0);\n                document.getElementById('weights-output').innerHTML = '&nbsp;= 0';\n                document.getElementById('weight-slider').value = 0;\n            }\n        }\n\n        /**\n         * Event listener for right clcking nodes. Creates a small menu that can be used\n         * to hide the associated node.\n         *\n         * @param {object} node - The node that is dragged\n         */\n        function rightClick(node) {\n\n            // Remove node information box.\n            ddd.selectAll('.text').remove();\n            ddd.selectAll('rect').remove();\n            ddd.selectAll('#preview').remove();\n            ddd.selectAll('#bgrnd').remove();\n\n            // Prevent regular right click menu.\n            ddd.event.preventDefault();\n\n            // Nothing to do if root node clicked.\n            if (node.id == 'root') {\n                return;\n            }\n            // Store the clicked node.\n            var clickedNode = node;\n\n            // Remove current node listeners.\n            graphNodes.on('mouseover', null)\n                .on('mouseout', null);\n\n            var r = graph.append('rect');\n\n            // Make the text.\n            var t = graph.append('text')\n                .attr('class', 'text')\n                .attr('id', 'rctext')\n                .attr('x', node.x + 10)\n                .attr('y', node.y + 12)\n                .attr('dy', '.40em')\n                .style('pointer-events', 'none')\n                .text(langStrings.hide);\n\n            // If node near bottom of graph area, move text above node.\n            if (node.y + 20 >= height) {\n                t.attr('y', height - (height - node.y) - 10)\n                    .text(langStrings.hide);\n            }\n\n            // Make the rectange background.\n            r.attr('id', 'rcrect')\n                .attr('x', node.x)\n                .attr('y', node.y + 20 <= height ? node.y : height - (height - node.y) - 20)\n                .attr('width', 60)\n                .attr('height', 24)\n                .style('stroke', 'black')\n                .style('fill', 'lightgrey');\n\n            // Colour the rectange.\n            r.on('mouseover', function() {\n                ddd.event.target.style = 'fill: grey;';\n            });\n\n            r.on('mouseout', function() {\n                ddd.event.target.style = 'fill: lightgrey;';\n            });\n\n            // Hide node(s).\n            r.on('click', function() {\n\n                // Remove the right click menu.\n                ddd.selectAll('#rctext').remove();\n                ddd.selectAll('#rcrect').remove();\n\n                // Replace the node listeners.\n                graphNodes.on('mouseover', mouseover)\n                    .on('mouseout', mouseout);\n\n                // Make node(s) hidden.\n                clickedNode.visible = 0;\n                nodeBoxes[clickedNode.id].checked = false;\n\n                // Hide all nodes for a group/section.\n                if (clickedNode.type == 'grouping') {\n\n                    graphData.nodes.forEach(function(dn) {\n                        if (dn.group == clickedNode.group) {\n                            dn.visible = 0;\n                            nodeBoxes[dn.id].checked = false;\n                        }\n                    });\n                }\n                checkWeight();\n                drawGraph();\n            });\n        }\n\n        /**\n         * Event listener for dragging nodes during the positioning stage.\n         *\n         * @param {object} node - The node that is dragged\n         */\n        function dragstarted(node) {\n\n            // Restart simulation if there is no event.\n            if (!ddd.event.active) {\n                simulation.alphaTarget(dragAlpha).restart();\n            }\n\n            node.fx = node.x;\n            node.fy = node.y;\n        }\n\n        /**\n         * Event listener for dragging nodes during positioning stage.\n         *\n         * @param {object} node - The node that is dragged\n         */\n        function dragged(node) {\n\n            // Remove text boxes/iframe previews.\n            ddd.selectAll('rect').remove();\n            ddd.selectAll('.text').remove();\n            ddd.selectAll('#preview').remove();\n            ddd.selectAll('#bgrnd').remove();\n\n            node.fx = ddd.event.x;\n            node.fy = ddd.event.y;\n        }\n\n        /**\n         * Event listener for dragging nodes.\n         *\n         * @param {object} node - The node that is dragged\n         */\n        function dragended(node) {\n\n            if (!ddd.event.active) {\n\n                // Positioning nodes?\n                if (positioning) {\n\n                    // Get normalized coordinates and send to server.\n                    simulation.stop();\n                    if (graphData.links[0].value) {\n                        sendCoordsToServer(graphData.links);\n                    } else {\n                        sendCoordsToServer(null);\n                    }\n                    drawTime();\n\n                } else {\n                    // Not positioning nodes.\n                    simulation.alphaTarget(dragEndAlpha);\n                }\n            }\n\n            node.fx = null;\n            node.fy = null;\n\n            dragEndTime = Date.now();\n        }\n\n        /**\n         * Called to make the cluster/graph button.\n         *\n         * @return {number}\n         */\n        function makeClusterButton() {\n\n            var sm = document.getElementById('student-menu');\n\n            clusterButton = document.createElement('button');\n            clusterButton.innerHTML = langStrings.cluster;\n            clusterButton.className = \"btn btn-secondary mb-1\";\n            clusterButton.addEventListener('click', doCluster);\n            sm.appendChild(clusterButton);\n\n            return clusterButton.getBoundingClientRect().height;\n        }\n\n        /**\n         * Called to make the student select menu on the main graphing screen.\n         *\n         * @param {number} cbHeight - Height of cluster button\n         */\n        function makeStudentMenu(cbHeight) {\n\n            // Left panel menu.\n            var sm = document.getElementById('student-menu');\n\n            // Student multiple select menu.\n            studentMenu = document.createElement('select');\n            studentMenu.multiple = true;\n            studentMenu.id = 'student-select';\n            var menuHeight = groups.length > 0 ? height - cbHeight - 120 : height - cbHeight - 12;\n            studentMenu.style = 'height: ' + menuHeight + 'px;';\n\n            // Shade menu item when selected.\n            studentMenu.addEventListener('change', function() {\n\n                var sel = document.getElementById('student-select');\n                var normal = 'box-shadow: 0 0 0 0 white inset;';\n\n                for (var i = 0; i < sel.options.length; i++) {\n\n                    var shade = 'box-shadow: 0 0 10px 100px ' + sel.options[i].colour + ' inset;';\n                    sel.options[i].style = sel.options[i].selected ? shade : normal;\n                }\n                if (logs.length > 0) {\n                    drawGraphNew(true);\n                }\n            });\n\n            // Sort the users for nicer in menu display.\n            if (showStudentNames == 1) {\n                users.sort(function(a, b) {\n\n                    var aName = a.firstname + ' ' + a.lastname;\n                    var bName = b.firstname + ' ' + b.lastname;\n\n                    if (aName > bName) {\n                        return 1;\n                    }\n                    if (aName < bName) {\n                        return -1;\n                    }\n                    return 0;\n                });\n            } else {\n                users.sort(function(a, b) {\n                    return a.id - b.id;\n                });\n            }\n\n            // Add users to the list.\n            users.forEach(function(u) {\n                addListItem(u, studentMenu);\n            });\n\n            sm.appendChild(studentMenu);\n        }\n\n        /**\n         * Adds an item to the student select menu used in the graphing stage.\n         *\n         * @param {object} user - The student info\n         * @param {HTMLElement} menu - The parent to append to\n         */\n        function addListItem(user, menu) {\n\n            // Make the list item.\n            var o = document.createElement('option');\n            o.value = user.id;\n            o.text = showStudentNames == 1 ? user.firstname + ' ' + user.lastname : user.id;\n            o.colour = colours[colourIndex++];\n\n            // Make sure colourIndex stays in bounds.\n            if (colourIndex >= colours.length) {\n                colourIndex = 0;\n            }\n            // Assign the links for this student the same colour as menu.\n            graphData.edges[user.id].forEach(function(ul) {\n                ul.colour = o.colour;\n            });\n\n            menu.appendChild(o);\n        }\n\n        /**\n         * Called to make the group selection menu.\n         */\n        function makeGroupMenu() {\n\n            if (groups.length == 0) {\n                return;\n            }\n\n            var sm = document.getElementById('student-menu');\n\n            // Group multiple select menu.\n            groupMenu = document.createElement('select');\n            groupMenu.multiple = true;\n            groupMenu.id = 'group-select';\n            groupMenu.style = 'height: 120px;';\n\n            groupMenu.addEventListener('change', function() {\n\n                // Reset.\n                ddd.selectAll('.link').remove();\n                ddd.selectAll('.hull').remove();\n                makeLinks(graphData.links);\n                simulation.on('tick', tick1);\n                simulation.restart();\n                setTimeout(simulation.stop, 100);\n                studentMenu.options.length = 0;\n                colourIndex = 0;\n\n                // Add users to the list if they are in a selected group.\n                for (var i = 0; i < groupMenu.options.length; i++) {\n                    if (groupMenu.options[i].selected) {\n                        for (var j = 0; j < users.length; j++) {\n                            if (groupMembers[users[j].realId] == groupMenu.options[i].value) {\n                                addListItem(users[j], studentMenu);\n                            }\n                        }\n                    }\n                }\n            });\n\n            // Add groups to menu.\n            var o;\n            for (var gid in groups) {\n                o = document.createElement('option');\n                o.value = gid;\n                o.text = groups[gid];\n                groupMenu.appendChild(o);\n            }\n\n            sm.appendChild(groupMenu);\n        }\n\n        /**\n         * Called to make the time slider on the main graphing screen.\n         */\n        function makeTimeSlider() {\n\n            // Make the time slider.\n            timeSlider = document.getElementById('slider');\n            sliderValues = [0, graphData.maxSession];\n\n            var divider;\n            if (graphData.maxSession < 500) {\n                divider = 10;\n            } else if (graphData.maxSession < 1000) {\n                divider = 20;\n            } else if (graphData.maxSession < 5000) {\n                divider = 100;\n            } else if (graphData.maxSession < 10000) {\n                divider = 200;\n            } else {\n                divider = 500;\n            }\n\n            slider.create(timeSlider, {\n                start: [0, graphData.maxSession],\n                range: {\n                    min: [0],\n                    max: [graphData.maxSession]\n                },\n                step: 1,\n                connect: true,\n                pips: {\n                    mode: 'steps',\n                    stepped: true,\n                    density: 100,\n                    filter: function(n) {\n                        if (n == 0 || n == graphData.maxSession) {\n                            return 1;\n                        } else if (n % divider == 0) {\n                            return 2;\n                        } else {\n                            return 0;\n                        }\n                    },\n                }\n            });\n\n            setTimeout(function() {\n                // Event listener, redraws graph when changed.\n                timeSlider.noUiSlider.on('update', function(values, handle) {\n                    sliderValues[handle] = parseInt(values[handle]);\n                    studentMenu.dispatchEvent(new Event('change'));\n                });\n            }, 1000);\n        }\n\n        /**\n         * Function to draw the behaviour graph during the positioning stage.\n         */\n        function drawGraph() {\n\n            graphLinks.remove();\n            graphNodes.remove();\n            ddd.selectAll('.hull').remove();\n\n            var notNodes = doNodes(rightClick);\n            doLinks(notNodes);\n            makePolygonHulls(notNodes);\n\n            simulation.alphaTarget(linkAlpha).restart();\n\n            // If positioning, stop the simulation and update the DB coords tables.\n            if (positioning) {\n                setTimeout(function() {\n                    simulation.stop();\n\n                    if (useLSA) {\n                        sendCoordsToServer(graphData.links);\n                    } else {\n                        sendCoordsToServer(null);\n                    }\n                    drawTime();\n                }, 100);\n            }\n        }\n\n        /**\n         * Function to draw the behaviour graph during the graphing stage.\n         *\n         * @param {boolean} doHulls - Draw the polygon hulls or not\n         */\n        function drawGraphNew(doHulls) {\n\n            graphLinks.remove();\n            graphNodes.remove();\n            ddd.selectAll('.hull').remove();\n\n            positioning = false;\n            if (useLSA) {\n                graphing = true;\n            }\n\n            var notNodes = doNodes(null);\n            doLinks(notNodes);\n\n            if (doHulls) {\n                makePolygonHulls(notNodes);\n            }\n\n            positioning = true;\n            if (useLSA && graphData.links[0].label) {\n                graphing = false;\n                simulation.on('tick', tick2);\n\n            } else {\n                simulation.on('tick', tick1);\n            }\n            simulation.restart();\n            setTimeout(simulation.stop, 100);\n        }\n\n        /**\n         * Function to change the nodes used in the graph. Called when the graph is redrawn.\n         *\n         * @param {function} rclick - Right click function to assign to the nodes\n         * @returns {array}\n         */\n        function doNodes(rclick) {\n\n            var nodes = [],\n                notNodes = {};\n\n            graphData.nodes.forEach(function(dn) {\n\n                // After dragended, fx and fy values null, causing node to start\n                // at top left of graph on redraw, this keeps node in place.\n                if (dn.fx === null) {\n                    dn.fx = dn.x;\n                    dn.fy = dn.y;\n                }\n\n                // Only want visible nodes.\n                if (dn.visible) {\n                    nodes[nodes.length] = dn;\n                } else {\n                    notNodes[dn.id] = 1;\n                }\n            });\n\n            if (!useLSA) {\n                simulation.nodes(nodes);\n            }\n\n            makeNodes(nodes, rclick, dragstartedFunc, draggedFunc, dragendedFunc);\n\n            return notNodes;\n        }\n\n        /**\n         * Function to change the links used in the graph. Called when the graph is redrawn.\n         *\n         * @param {array} notNodes - The invisible nodes\n         */\n        function doLinks(notNodes) {\n\n            var links = [], // Background links that hold sections together.\n                sid, // Source node id.\n                tid, // Target node id.\n                dl, // Data link.\n                sl, // Student link.\n                i; // Loop variable.\n\n            for (i in graphData.links) {\n                dl = graphData.links[i];\n                if (useLSA) {\n                    dl.colour = modColours.originalLinks;\n                }\n\n                // Get source/target id.\n                if (typeof dl.source == 'string') {\n                    sid = dl.source;\n                    tid = dl.target;\n                    if (useLSA) {\n                        dl.source = getEqualToNode(sid);\n                        dl.target = getEqualToNode(tid);\n                    }\n                } else {\n                    sid = dl.source.id;\n                    tid = dl.target.id;\n                }\n\n                // Ensure link has a both source and target nodes.\n                if (notNodes[sid] || notNodes[tid]) {\n                    continue;\n                } else {\n                    links[links.length] = dl;\n                }\n            }\n\n            var options = positioning ? [] : document.getElementById('student-select').options;\n\n            // For any students who are checked.\n            for (i = 0; i < options.length; i++) {\n\n                if (options[i].selected) {\n\n                    // Node id, object.\n                    var id,\n                        ob = {},\n                        j;\n\n                    // Add student links to link set.\n                    for (j = sliderValues[0]; j <= sliderValues[1]; j++) {\n\n                        // Are we including the links for this slider value?\n                        if (graphData.edges[options[i].value].length > j) {\n\n                            sl = graphData.edges[options[i].value][j];\n\n                            // Get source/target id.\n                            if (typeof sl.source == 'string') {\n                                id = sl.source + '_' + sl.target;\n                                sid = sl.source;\n                                tid = sl.target;\n                                if (useLSA) {\n                                    sl.source = getEqualToNode(sid);\n                                    sl.target = getEqualToNode(tid);\n                                }\n                            } else {\n                                id = sl.source.id + '_' + sl.target.id;\n                                sid = sl.source.id;\n                                tid = sl.target.id;\n                            }\n                            if (ob[id]) {\n                                ob[id]++;\n                            } else {\n                                ob[id] = 1;\n                            }\n\n                            // Ensure link has a both source and target nodes.\n                            if (notNodes[sid] || notNodes[tid]) {\n                                continue;\n                            } else {\n                                links[links.length] = sl;\n                            }\n                        } else {\n                            // Slider value is larger than number of links, move on.\n                            break;\n                        }\n                    }\n\n                    // Weight the links.\n                    for (j = sliderValues[0]; j <= sliderValues[1]; j++) {\n\n                        // Are we including the links for this slider value?\n                        if (graphData.edges[options[i].value].length > j) {\n\n                            sl = graphData.edges[options[i].value][j];\n\n                            // Get source/target id.\n                            if (typeof sl.source == 'string') {\n                                id = sl.source + '_' + sl.target;\n                            } else {\n                                id = sl.source.id + '_' + sl.target.id;\n                            }\n                            sl.weight = ob[id];\n                        } else {\n                            break;\n                        }\n                    } // End for each slider value.\n                } // End if option selected.\n            } // End for any student who are checked.\n\n            if (!useLSA) {\n                simulation.force('link').links(links);\n            }\n            makeLinks(links);\n        }\n\n        /**\n         * Called to get the node equal to the ID value passed.\n         *\n         * @param {number} id - The source or target node id\n         * @return {object} node - The matching graph node\n         */\n        function getEqualToNode(id) {\n\n            var node = graphData.nodes.find(function(n) {\n                return n.id == id;\n            });\n\n            return node;\n        }\n\n        /**\n         * Called to render the hulls. Hulls get made around student links during graphing.\n         *\n         * @param {array} notNodes - The invisible nodes\n         */\n        function makePolygonHulls(notNodes) {\n\n            if (positioning) {\n                return;\n            }\n            ddd.selectAll('.hull').remove();\n\n            var options = document.getElementById('student-select').options;\n            var nodeGroups = {};\n\n            // For any students who are checked.\n            for (var i = 0; i < options.length; i++) {\n                if (options[i].selected) {\n\n                    // SourceNodeX/Y, targetNodeX/Y, linkColour, sourceId, targetId.\n                    var snx, sny, tnx, tny, lc, sid, tid;\n                    nodeGroups[options[i].value] = {};\n\n                    // Add student links to link set.\n                    for (var j = sliderValues[0]; j <= sliderValues[1]; j++) {\n\n                        // Are we including the links for this slider value?\n                        if (graphData.edges[options[i].value].length > j) {\n\n                            var sl = graphData.edges[options[i].value][j];\n\n                            // Get source/target id.\n                            if (typeof sl.source == 'string') {\n                                sid = sl.source;\n                                tid = sl.target;\n\n                                var nd = getEqualToNode(sid);\n\n                                snx = nd.x;\n                                sny = nd.y;\n\n                                nd = getEqualToNode(tid);\n\n                                tnx = nd.x;\n                                tny = nd.y;\n                            } else {\n                                sid = sl.source.id;\n                                tid = sl.target.id;\n\n                                snx = sl.source.x;\n                                sny = sl.source.y;\n\n                                tnx = sl.target.x;\n                                tny = sl.target.y;\n                            }\n\n                            // Ensure link has a both source and target nodes.\n                            if (notNodes[sid] || notNodes[tid]) {\n                                continue;\n                            } else {\n                                lc = sl.colour;\n                                nodeGroups[options[i].value][sid] = {x: snx, y: sny, colour: lc};\n                                nodeGroups[options[i].value][tid] = {x: tnx, y: tny, colour: lc};\n                            }\n                        } else {\n                            // Slider value greater than number of links, move on.\n                            break;\n                        }\n                    } // End for each slider value.\n                } // End if option selected.\n            } // End for any student who are checked.\n\n            // Make the actual hulls.\n            for (var key in nodeGroups) {\n                makePolygonHull(nodeGroups[key], key, false, false);\n            }\n            if (graphing) {\n                if (useGeometricCentroids) {\n                    getGeometricCentroids(options);\n                } else {\n                    getDecomposedCentroids(options);\n                }\n            }\n        }\n\n        /**\n         * Called to populate the hullCentroids global object. Centroid\n         * decomposition is used to determine the centroid where the student\n         * graph is considered linear, so has no loops.\n         *\n         * @param {array} options - The array of student menu items\n         */\n        function getDecomposedCentroids(options) {\n\n            hullCentroids = {}; // Clear the old values.\n\n            // Fixes a bug in empty course with no students.\n            if (Object.keys(clickData).length == 0) {\n                return;\n            }\n\n            // Only consider students who are checked.\n            for (var i = 0; i < options.length; i++) {\n\n                if (options[i].selected) {\n                    var student = options[i].value;\n\n                    // Time slider handle may be beyond student data.\n                    if (clickData[student].length <= sliderValues[0]) {\n                        continue;\n                    }\n\n                    // Consider only relevant time slider values.\n                    var start = sliderValues[0];\n                    var end = clickData[student].length > sliderValues[1] + 1 ? sliderValues[1] : clickData[student].length;\n\n                    // Centroid is halfway along linear graph.\n                    var half = parseInt((start / 2) + (end / 2));\n\n                    // Get node coordinates for centroid.\n                    var mid = clickData[student][half];\n                    var xcoord = parseFloat(presetNodes[mid].xcoord);\n                    var ycoord = parseFloat(presetNodes[mid].ycoord);\n\n                    // Scale the normalized centroid coordinates.\n                    hullCentroids[student] = {\n                        x: xcoord * coordsScale + coordsData.originalx,\n                        y: ycoord * coordsScale + coordsData.originaly,\n                        colour: options[i].colour\n                    };\n                }\n            }\n        }\n\n        /**\n         * Called to populate the hullCentroids global object. The weighted\n         * geometric centroid is calculated from the student click data where\n         * each visible, clicked node is used.\n         *\n         * @param {array} options - The array of student menu items\n         */\n        function getGeometricCentroids(options) {\n\n            hullCentroids = {}; // Clear the old values.\n\n            // Fixes a bug in empty course with no students.\n            if (Object.keys(clickData).length == 0) {\n                return;\n            }\n\n            // Only consider students who are checked.\n            for (var i = 0; i < options.length; i++) {\n                if (options[i].selected) {\n                    var student = options[i].value;\n\n                    // Time slider handle may be beyond student data.\n                    if (clickData[student].length <= sliderValues[0]) {\n                        continue;\n                    }\n\n                    // Consider only relevant time slider values.\n                    var start = sliderValues[0];\n                    var end = clickData[student].length > sliderValues[1] + 1 ? sliderValues[1] : clickData[student].length;\n                    // Total x, total y, and counter.\n                    var tx = 0,\n                        ty = 0,\n                        n = 0;\n\n                    // Sum the clicked nodes.\n                    for (var j = start, mid; j < end; j++) {\n                        mid = clickData[student][j];\n                        tx += parseFloat(presetNodes[mid].xcoord);\n                        ty += parseFloat(presetNodes[mid].ycoord);\n                        n++;\n                    }\n\n                    // Scale the normalized centroid coordinates.\n                    hullCentroids[student] = {\n                        x: (tx / n) * coordsScale + coordsData.originalx,\n                        y: (ty / n) * coordsScale + coordsData.originaly,\n                        colour: options[i].colour\n                    };\n                }\n            }\n        }\n\n        /**\n         * Called to make the actual polygon hull.\n         * Adapted from http://bl.ocks.org/hollasch/9d3c098022f5524220bd84aae7623478\n         * and https://bl.ocks.org/XavierGimenez/a8e8c5e9aed71ba96bd52332682c0399\n         * and https://bl.ocks.org/pbellon/d397cbdfc596f1724860b60a1d41be43.\n         *\n         * @param {object} group - The group of points\n         * @param {number} key - The student id\n         * @param {boolean} manualHull - Is the hull for a manual cluster?\n         * @param {boolean} useTrans - Are the hulls to be transitioned?\n         */\n        function makePolygonHull(group, key, manualHull, useTrans) {\n\n            // No points in group, nothing to hull around.\n            if (Object.keys(group).length == 0) {\n                return;\n            }\n            var coords = [],\n                colour,\n                lf, // Line function.\n                hullPadding = 20,\n                hullClass;\n\n            if (graphing) {\n                hullClass = 'hull';\n            } else if (manualHull) {\n                hullClass = 'manual-hull';\n            } else {\n                hullClass = 'cluster-hull';\n            }\n\n            // Put point into array.\n            for (var k in group) {\n                coords[coords.length] = [group[k].x, group[k].y];\n                colour = group[k].colour;\n            }\n\n            // Only 1 point?\n            if (coords.length == 1) {\n\n                lf = function(polyPoints) {\n                    // Returns the path for a circular hull around a single point.\n\n                    var p1 = [polyPoints[0][0], polyPoints[0][1] - hullPadding];\n                    var p2 = [polyPoints[0][0], polyPoints[0][1] + hullPadding];\n\n                    return 'M ' + p1 +\n                        ' A ' + [hullPadding, hullPadding, '0,0,0', p2].join(',') +\n                        ' A ' + [hullPadding, hullPadding, '0,0,0', p1].join(',');\n                };\n            } else if (coords.length == 2) {\n                // Only 2 points?\n\n                // Vector from p0 to p1.\n                var vecFrom = function(p0, p1) {\n                    return [p1[0] - p0[0], p1[1] - p0[1]];\n                };\n\n                // Vector v scaled by 'scale'.\n                var vecScale = function(v, scale) {\n                    return [scale * v[0], scale * v[1]];\n                };\n\n                // The sum of two points/vectors.\n                var vecSum = function(pv1, pv2) {\n                    return [pv1[0] + pv2[0], pv1[1] + pv2[1]];\n                };\n\n                // Vector with direction of v and length 1.\n                var vecUnit = function(v) {\n                    var norm = Math.sqrt(v[0] * v[0] + v[1] * v[1]);\n                    return vecScale(v, 1 / norm);\n                };\n\n                // Vector with direction of v with specified length.\n                var vecScaleTo = function(v, length) {\n                    return vecScale(vecUnit(v), length);\n                };\n\n                // Unit normal to vector pv0, or line segment from p0 to p1.\n                var unitNormal = function(pv0, p1) {\n                    if (p1 !== undefined) {\n                        pv0 = vecFrom(pv0, p1);\n                    }\n                    var normalVec = [-pv0[1], pv0[0]];\n                    return vecUnit(normalVec);\n                };\n\n                lf = function(polyPoints) {\n                    // Returns the path for a rounded hull around two points.\n\n                    var v = vecFrom(polyPoints[0], polyPoints[1]);\n                    var extensionVec = vecScaleTo(v, hullPadding);\n\n                    var extension0 = vecSum(polyPoints[0], vecScale(extensionVec, -1));\n                    var extension1 = vecSum(polyPoints[1], extensionVec);\n\n                    var tangentHalfLength = 1.2 * hullPadding;\n                    var controlDelta = vecScaleTo(unitNormal(v), tangentHalfLength);\n                    var invControlDelta = vecScale(controlDelta, -1);\n\n                    var control0 = vecSum(extension0, invControlDelta);\n                    var control1 = vecSum(extension1, invControlDelta);\n                    var control3 = vecSum(extension0, controlDelta);\n\n                    return 'M ' + extension0 +\n                        ' C ' + [control0, control1, extension1].join(',') +\n                        ' S ' + [control3, extension0].join(',') +\n                        ' Z';\n                };\n            } else {\n                // Enough points to make a concave hull.\n                var hull = ddd.concaveHull().padding(15);\n\n                if (!useDefaultConcave) {\n                    hull.distance(concaveHullDistance);\n                }\n\n                var pgh = coords.length > 4 ? hull(coords) : [coords];\n                lf = ddd.line().curve(curveType);\n\n                // Draw the polygon.\n                graph.selectAll('#hull-' + key)\n                    .data(pgh)\n                    .enter()\n                    .append('path')\n                    .attr('id', 'hull-' + key)\n                    .attr('class', hullClass)\n                    .style('stroke', colour)\n                    .style('stroke-opacity', useTrans ? 0 : 1.0)\n                    .style('fill', colour)\n                    .style('fill-opacity', useTrans ? 0 : hullOpacity)\n                    .attr('d', lf);\n\n                return;\n            }\n\n            // Draw the hull.\n            graph.append('path')\n                .attr('id', 'hull-' + key)\n                .attr('class', hullClass)\n                .style('stroke', colour)\n                .style('stroke-opacity', useTrans ? 0 : 1.0)\n                .style('fill', colour)\n                .style('fill-opacity', useTrans ? 0 : hullOpacity)\n                .attr('d', lf(coords));\n        }\n\n        /**\n         * Event listener for cluster/graph button. This function reverts the program\n         * from the clustering stage to the graphing stage.\n         */\n        function doGraph() {\n\n            // Stop clustering.\n            clearInterval(clusterAnimInterval);\n            clusterAnimInterval = undefined;\n            scaledCentroids = null;\n            resetLogPanel();\n\n            // Remove clustering elements.\n            ddd.selectAll('.clustering-centroid').remove();\n            ddd.selectAll('.cluster-hull').remove();\n            ddd.selectAll('.centroid').remove();\n            ddd.selectAll('.server-centroid').remove();\n            clusterSlider.style.display = 'none';\n            document.getElementById('anim-controls').style.display = 'none';\n            document.getElementById('log-panel').style.display = 'none';\n\n            // Ensure student menu is correctly sized.\n            var sm = document.getElementById('student-menu');\n            sm.style.width = clusterButton.style.width;\n\n            // Remove clustering name text box and button.\n            document.getElementById('clustering-replay-comment').innerHTML = '&nbsp';\n\n            // Start graphing.\n            graphing = true;\n            iframeStaticPos = false;\n\n            // Replace graphing stuff.\n            timeSlider.style.display = 'block';\n            studentMenu.style.display = 'block';\n            if (groupMenu) {\n                groupMenu.style.display = 'block';\n            }\n\n            graphNodes.style('display', 'block');\n            graphNodes.style('opacity', 1.0);\n            graphLinks.style('display', 'block');\n            graphLinks.style('opacity', 1.0);\n            drawGraphNew(true);\n            graphNodes.on('mouseover', mouseover)\n                .on('mouseout', mouseout);\n\n            // Reset graph button to cluster button.\n            clusterButton.innerHTML = langStrings.cluster;\n            clusterButton.removeEventListener('click', doGraph);\n            clusterButton.addEventListener('click', doCluster);\n        }\n\n        /**\n         * Event listener for cluster button. Changes from graphing to clustering.\n         */\n        function doCluster() {\n\n            // Stop graphing.\n            graphing = false;\n\n            timeSlider.style.display = 'none';\n            studentMenu.style.display = 'none';\n            if (groupMenu) {\n                groupMenu.style.display = 'none';\n            }\n\n            ddd.selectAll(\".hull\").remove();\n            ddd.selectAll('.text').remove();\n            ddd.selectAll('rect').remove();\n\n            // Ensure student menu is sized properly.\n            var sm = document.getElementById('student-menu');\n            sm.style.width = clusterSliderPanelWidth + 'px';\n\n            // Change cluster button to graph button.\n            clusterButton.innerHTML = langStrings.graph;\n            clusterButton.removeEventListener('click', doCluster);\n            clusterButton.addEventListener('click', doGraph);\n\n            // Stop the graph and related functionality.\n            simulation.stop();\n            graphNodes.on('mouseover', null)\n                .on('mouseout', null)\n                .on('contextmenu', null)\n                .call(ddd.drag()\n                      .on('start', null)\n                      .on('drag', null)\n                      .on('end', null));\n\n            // Reset coordinate id data and comments.\n            coordsData.clusterId = Date.now();\n            comments = {};\n\n            // Set/reset some clustering parameters.\n            clusterIters = 0;\n            clustering = false;\n            clusterSliderValue = 1;\n            clusterAnimInterval = undefined;\n\n            // Remove clustering name text box and button.\n            document.getElementById('clustering-replay-comment').innerHTML = '&nbsp';\n\n            // Placeholder text for text box.\n            var ph = '<p id=\"cluster-text\">' + langStrings.numclusters + '</p>';\n\n            // Set timeout to deal with bug where clicking slider too soon after clicking\n            // cluster button resulted in 'too late: already running' error from first.js.\n            setTimeout(function() {\n\n                // Make the clustering slider, if not already made.\n                if (!clusterSlider) {\n\n                    var cd = makeAnimationControls();\n                    makeClusterSlider(ph, cd);\n                    makeLogPanel();\n\n                } else {\n                    // Cluster slider has already been made, just reset everything.\n                    document.getElementById('clustering').innerHTML = '&nbsp';\n                    document.getElementById('dragdrop').innerHTML = '&nbsp';\n                    document.getElementById('cluster-text').innerHTML = ph;\n\n                    document.getElementById('play-pause').innerHTML = '&#9654'; // 9654=play.\n                    document.getElementById('play-pause').disabled = true;\n                    document.getElementById('play-step').disabled = true;\n\n                    document.getElementById('anim-controls').style.display = 'block';\n                    document.getElementById('log-panel').style.display = 'block';\n                    clusterSlider.removeAttribute('disabled');\n                    clusterSlider.noUiSlider.set(1);\n                    clusterSlider.style.display = 'block';\n                }\n\n                drawCentroids();\n            }, animTime / 2);\n        }\n\n        /**\n         * Called to do the clustering replay stage.\n         *\n         * @param {array} manData - The manual replay data from the server.\n         */\n        function doClusterReplay(manData) {\n\n            positioning = true;\n            presetNodes = {'0': 0, '1': 1, '2': 2};\n            height = window.innerHeight - 190;\n\n            makeReplayControls();\n            makeLogPanel();\n            makeReplayMenu(manData);\n\n        }\n\n        /**\n         * Called to make the clustering run menu for the replay stage.\n         *\n         * @param {array} manData - The manual clustering data.\n         */\n        function makeReplayMenu(manData) {\n\n            var sm = document.getElementById('student-menu');\n\n            replayMenu = document.createElement('select');\n            replayMenu.size = 3;\n            replayMenu.id = 'replay-select';\n            replayMenu.style = 'height: ' + (height - 12) + 'px;';\n            replayMenu.addEventListener('change', replayGraph.bind(this, manData));\n\n            // Add clustering runs to the menu.\n            for (var datasetid in originalReplayData) {\n                var i = 0;\n                for (var coordid in originalReplayData[datasetid]) {\n                    var j = 0;\n                    i++;\n                    for (var clusterid in originalReplayData[datasetid][coordid]) {\n\n                        if (!isNaN(clusterid) &&\n                            originalReplayData[datasetid][coordid][clusterid][1]) {\n\n                            var o = document.createElement('option');\n                            o.value = datasetid + '_' + coordid + '_' + clusterid;\n                            o.text = datasetid.split('-')[0] + '_' + i + '_' + (++j);\n                            replayMenu.appendChild(o);\n                        }\n                    }\n                }\n            }\n            sm.appendChild(replayMenu);\n        }\n\n        /**\n         * Called to display the initial graph for the replay stage.\n         *\n         * @param {array} manData - The manual replay data from the server.\n         */\n        function replayGraph(manData) {\n\n            var r = changeReplayData(manData);\n            var members = r.members;\n\n            // Remove graph and user menu, if exist, reset log panel.\n            if (graph) {\n                graph.remove();\n                resetPlayButton();\n                resetLogPanel();\n\n                document.getElementById('replayer').innerHTML = '&nbsp;';\n                document.getElementById('replaydragdrop').innerHTML = '&nbsp;';\n                document.getElementById('prediction-box').checked = false;\n                document.getElementById('prediction-label').style.opacity = 0;\n                document.getElementById('prediction-box').style.opacity = 0;\n\n                // Might be multiple comment textboxes open, remove them.\n                for (var ctb in commentTextBoxes) {\n                    document.body.removeChild(commentTextBoxes[ctb].textbox);\n                    document.body.removeChild(commentTextBoxes[ctb].button);\n                }\n                commentTextBoxes = {};\n            }\n            if (studentMenu) {\n                document.body.removeChild(studentMenu);\n            }\n\n            scaledCentroids = null;\n            assignModuleColours();\n\n            if (r.islsa) { // LSA graphs are special.\n                var nodes = [];\n                var keys = Object.keys(presetNodes);\n\n                // Repackage nodes and add colour.\n                for (var j = 0; j < keys.length; j++) {\n                    nodes[j] = presetNodes[keys[j]];\n                    nodes[j].colour = modColours[nodes[j].entype];\n                }\n                graphData.nodes = nodes;\n\n                for (var ll in lordLinks) {\n                    lordLinks[ll].colour = modColours.originalLinks;\n                }\n                graphData.links = lordLinks;\n\n                graphData.edges = {};\n                makeStudentLinks();\n\n            } else {\n                getData();\n            }\n            sliderValues = [0, graphData.maxSession];\n\n            document.getElementById('replay-stop').style.opacity = 1;\n            document.getElementById('replay-pause').style.opacity = 1;\n            document.getElementById('replay-back').style.opacity = 1;\n            document.getElementById('replay-forward').style.opacity = 1;\n            document.getElementById('delete-button').style.opacity = 1;\n\n            if (replayData[-1]) {\n                document.getElementById('prediction-label').style.opacity = 1;\n                document.getElementById('prediction-box').style.opacity = 1;\n            }\n\n            if (predictionAnalysis && predictionAnalysis.coordsid === r.gid && predictionAnalysis.clusterid === r.cid) {\n                document.getElementById('prediction-box').checked = true;\n            }\n\n            // Ensure no new nodes are shown if they have no coords.\n            for (var i = 0; i < graphData.nodes.length; i++) {\n                if (graphData.nodes[i].xcoord === undefined) {\n                    graphData.nodes[i].visible = 0;\n                }\n            }\n\n            fakeStudentMenu(members);\n\n            // Draw the graph.\n            initGraph(0);\n            drawGraphNew(false);\n\n            graphNodes.on('mouseover', null).on('mouseout', null);\n            noCentroidMouse = true;\n\n            // Replace clustering name text box and button.\n            document.getElementById('clustering-replay-comment').innerHTML = '&nbsp';\n            addClusteringNameToNavigation();\n\n            // Draw the user centroids.\n            setTimeout(function() {\n                forwardScale(hullCentroids, false);\n                drawCentroids();\n                simulation.on('tick', tick1);\n\n                // Reassign listeners for dragging student centroids.\n                for (var key in hullCentroids) {\n                    ddd.select('#centroid-' + key)\n                        .call(ddd.drag()\n                              .on('start', replayCentroidDragStart.bind(this, key))\n                              .on('drag', replayCentroidDrag.bind(this, key))\n                              .on('end', replayCentroidDragEnd.bind(this, key, manData, r)));\n                }\n            }, 500);\n        }\n\n        /**\n         * Event listener for dragging student centroids during replay.\n         * Draws a temporary student centroid for dragging.\n         *\n         * @param {number} studentKey - The student id.\n         */\n        function replayCentroidDragStart(studentKey) {\n\n            if (!canDragReplayCentroid(studentKey)) {\n                return;\n            }\n\n            centroidDragTime = Date.now();\n\n            graph.append('polygon')\n                .attr('class', 'dragged-centroid')\n                .attr('id', 'dragged-' + studentKey)\n                .attr('points', getPolygonPoints(ddd.event.x, ddd.event.y))\n                .style('stroke', 'black')\n                .style('stroke-width', '3px')\n                .style('fill', hullCentroids[studentKey].colour)\n                .style('opacity', 0.5);\n        }\n\n        /**\n         * Event listener for dragging student centroids during replay.\n         * Moves a student centroid with the mouse.\n         *\n         * @param {number} studentKey - The student id.\n         */\n        function replayCentroidDrag(studentKey) {\n\n            ddd.select('#dragged-' + studentKey)\n                .attr('points', getPolygonPoints(ddd.event.x, ddd.event.y));\n        }\n\n        /**\n         * Event listener for dragging student centroids during replay.\n         * Reclusters students, draws hulls and clustering centroids.\n         *\n         * @param {number} studentKey - The student id.\n         * @param {array} manData - Manual clustering data from server.\n         * @param {object} ids - The dataset, graph configuration, and cluster ids.\n         */\n        function replayCentroidDragEnd(studentKey, manData, ids) {\n\n            ddd.selectAll('.dragged-centroid').remove();\n\n            if (!canDragReplayCentroid(studentKey)) {\n                return;\n            }\n\n            // User wants to click for text box, not drag for clustering?\n            if (Date.now() - centroidDragTime < 300) {\n                centroidClick(realUserIds[studentKey], studentKey, false);\n                return;\n            }\n\n            // Copy replay data, if not already done.\n            if (!haveManualClustering) {\n                copyReplayData();\n            }\n\n            var currentIter = getCurrentIteration();\n\n            // When manual clsutering done at later iteration, replay data not copied,\n            // which messes up manual clustering. In this case, copy the data for the\n            // current iteration.\n            if (Object.keys(manualClusters[currentIter]).length == 0) {\n                for (var i = 0; i < replayData[currentIter].length; i++) {\n                    for (var member in replayData[currentIter][i].members) {\n\n                        var id = anonUserIds[replayData[currentIter][i].members[member].id];\n                        manualClusters[currentIter][id] = i;\n                    }\n                }\n            }\n\n            // Reassign student to new cluster for all iterations.\n            var newK = getNewCluster(ddd.event);\n            for (var iter in manualClusters) {\n                if (iter <= currentIter) {\n                    manualClusters[iter][studentKey] = newK;\n                }\n            }\n\n            drawManualClusters(currentIter, manData, ids);\n            haveManualClustering = true;\n\n            // Show clustering results in log panel.\n            logManualClusteringResults(currentIter);\n\n            // Log clustering iteration at server.\n            sendManualClustersToServer(currentIter);\n        }\n\n        /**\n         * Function called to send the manual clustering data to the server.\n         *\n         * @param {number} currentIter - The current iteration value.\n         */\n        function sendManualClustersToServer(currentIter) {\n\n            var out = {clusterCoords: [], members: []};\n            for (var i = 0; i < manualCentroids.length; i++) {\n\n                // Get the reversed centroid coordinate.\n                var centroid = manualCentroids[i] ? manualCentroids[i] : centroids[i];\n                out.clusterCoords[i] = reverseScale(centroid);\n                out.clusterCoords[i].num = i;\n\n                // Map anonymized student id back to real id for server.\n                for (var student in manualClusters[currentIter]) {\n                    if (manualClusters[currentIter][student] == i) {\n\n                        out.members[out.members.length] = {\n                            id:  realUserIds[student],\n                            num: i\n                        };\n                    }\n                }\n            }\n\n            out.iteration = currentIter;\n            out.clusterId = coordsData.clusterId;\n            out.coordsid = lastChange;\n\n            callServer(manualScript, out);\n        }\n\n        /**\n         * Log the manual clustering results to the log panel.\n         *\n         * @param {number} iter - The clustering iteration number\n         */\n        function logManualClusteringResults(iter) {\n\n            if (iter >= 0 || !manualClusters[iter] ||\n                    Object.keys(manualClusters[iter]).length == 0) {\n                return;\n            }\n\n            var measures = getClusterMeasures(iter);\n\n            // Log panel text.\n            var lpt = langStrings.manualcluster + '<br>';\n\n            // Get centroid from coordinates, then determine distance to\n            // cluster and membership.\n            var i;\n            for (i = 0; i < manualCentroids.length; i++) {\n\n                if (!manualCentroids[i]) {\n                    continue;\n                }\n\n                var dx = manualCentroids[i].x - width / 2;\n                var dy = manualCentroids[i].y - height / 2;\n                var d = Math.sqrt(dx * dx + dy * dy);\n                var c = centroids[i].colour;\n\n                // Add distance to cluster.\n                lpt += langStrings.disttocluster + ' <span style=\"color:' + c + '\">' +\n                    c + '</span>: ' + Math.round(d) + '<br>' + langStrings.cluster +\n                    ' ' + c + ' ' + langStrings.members + ': ' + '[';\n\n                // Add members for this cluster.\n                for (var student in manualClusters[iter]) {\n                    if (manualClusters[iter][student] == i) {\n                        lpt += student + ', ';\n                    }\n                }\n                // Remove trailing comma.\n                if (lpt.indexOf(',', lpt.length - 3) != -1) {\n                    lpt = lpt.slice(0, -2);\n                }\n                lpt += ']<br>';\n\n                // Log per cluster clustering measures for researchers.\n                if (isResearcher) {\n                    lpt += langStrings.precision + ': ' + measures[i].precision.toFixed(4) + '<br>';\n                    lpt += langStrings.recall + ': ' + measures[i].recall.toFixed(4) + '<br>';\n                    lpt += langStrings.f1 + ': ' + measures[i].f1.toFixed(4) + '<br>';\n                    lpt += langStrings.fhalf + ': ' + measures[i].fhalf.toFixed(4) + '<br>';\n                    lpt += langStrings.f2 + ': ' + measures[i].f2.toFixed(4) + '<br>';\n                }\n            }\n\n            // Write iteration results to log panel.\n            var lpv = logPanel.innerHTML.split('<br><br>');\n            var lpv0 = lpv[0].split('<br>');\n            logPanel.innerHTML = '';\n\n            // Remove previous manual clustering results, but keep k-means.\n            for (i = 0; i < lpv0.length; i++) {\n                if (lpv0[i].startsWith(langStrings.manualcluster)) {\n                    break;\n                }\n                logPanel.innerHTML += lpv0[i] + '<br>';\n            }\n\n            // Add in new manual clustering results.\n\n            // Log total clustering measures for researchers.\n            if (isResearcher) {\n                i = measures.length - 1;\n                lpt += langStrings.totalmeasures + '<br>';\n                lpt += langStrings.precision + ': ' + measures[i].precision.toFixed(4) + '<br>';\n                lpt += langStrings.recall + ': ' + measures[i].recall.toFixed(4) + '<br>';\n                lpt += langStrings.f1 + ': ' + measures[i].f1.toFixed(4) + '<br>';\n                lpt += langStrings.fhalf + ': ' + measures[i].fhalf.toFixed(4) + '<br>';\n                lpt += langStrings.f2 + ': ' + measures[i].f2.toFixed(4) + '<br>';\n            }\n\n            logPanel.innerHTML += lpt + '<br>';\n\n            // Add back all previous results.\n            for (i = 1; i < lpv.length; i++) {\n                logPanel.innerHTML += lpv[i] + '<br><br>';\n            }\n        }\n\n        /**\n         * Called to get the quality measures for the clustering results.\n         * Precision, recall, and F measure formulas taken from\n         * https://nlp.stanford.edu/IR-book/html/htmledition/evaluation-of-unranked-retrieval-sets-1.html\n         *\n         * @param {number} iter - The current iteration value.\n         * @return {array} results - The results of the clustering.\n         */\n        function getClusterMeasures(iter) {\n\n            var truePositives = 0,\n                falsePositives = 0,\n                falseNegatives = 0,\n                results = [],\n                p, // Precision.\n                r, // Recall.\n                i; // Loop variable.\n\n            // Calculate the precision, recall, and F measures for each cluster.\n            for (i = 0; i < centroids.length; i++) {\n                for (var student in scaledCentroids) {\n\n                    if (scaledCentroids[student].ci == i &&\n                        manualClusters[iter][student] == scaledCentroids[student].ci) {\n                        // Kmeans clustered correctly.\n                        truePositives++;\n                    } else if (scaledCentroids[student].ci == i &&\n                               manualClusters[iter][student] != scaledCentroids[student].ci) {\n                        // Kmeans clustered, but should not have.\n                        falsePositives++;\n                    } else if (manualClusters[iter][student] == i &&\n                               manualClusters[iter][student] != scaledCentroids[student].ci) {\n                        // Not kmeans clustered, but should be.\n                        falseNegatives++;\n                    }\n                }\n\n                p = truePositives / (truePositives + falsePositives);\n                r = truePositives / (truePositives + falseNegatives);\n\n                results[i] = {\n                    tp: truePositives,\n                    fp: falsePositives,\n                    fn: falseNegatives,\n                    precision: p,\n                    recall: r,\n                    f1: p + r == 0 ? 0 : (2.0 * p * r) / (p + r),\n                    fhalf: p + r == 0 ? 0 : (1.25 * p * r) / ((0.25 * p) + r),\n                    f2: p + r == 0 ? 0 : (5.0 * p * r) / ((4.0 * p) + r),\n                };\n\n                truePositives = 0;\n                falsePositives = 0;\n                falseNegatives = 0;\n            }\n\n            // Calculate measures for all clusters combined.\n            for (i = 0; i < results.length; i++) {\n                truePositives += results[i].tp;\n                falsePositives += results[i].fp;\n                falseNegatives += results[i].fn;\n            }\n\n            p = truePositives / (truePositives + falsePositives);\n            r = truePositives / (truePositives + falseNegatives);\n\n            results[results.length] = {\n                tp: truePositives,\n                fp: falsePositives,\n                fn: falseNegatives,\n                precision: p,\n                recall: r,\n                f1: p + r == 0 ? 0 : (2.0 * p * r) / (p + r),\n                fhalf: p + r == 0 ? 0 : (1.25 * p * r) / ((0.25 * p) + r),\n                f2: p + r == 0 ? 0 : (5.0 * p * r) / ((4.0 * p) + r),\n            };\n\n            return results;\n        }\n\n        /**\n         * Called to test if it is okay to drag student centroids during replay.\n         *\n         * @param {number} studentKey - The student id value.\n         * @return {boolean}\n         */\n        function canDragReplayCentroid(studentKey) {\n\n            // Not before final results, i.e. convergence.\n            if (document.getElementById('replayer').innerHTML != langStrings.convergence) {\n                return false;\n            }\n            // ...And only allow researcher to manipulate their own graph.\n            if (replayUserId != userId) {\n                return false;\n            }\n            // ...And not if the student is the only member of the cluster.\n            // Count k-means cluster members.\n            var clusterNum = scaledCentroids[studentKey].ci;\n            var members = 0,\n                student;\n            for (student in scaledCentroids) {\n                if (scaledCentroids[student].ci == clusterNum) {\n                    members++;\n                }\n            }\n            // Count manual cluster members.\n            var iter = getCurrentIteration();\n            var manMembers = 0;\n            if (manualClusters[iter]) {\n                clusterNum = manualClusters[iter][studentKey];\n                for (student in manualClusters[iter]) {\n                    if (manualClusters[iter][student] == clusterNum) {\n                        manMembers++;\n                    }\n                }\n            }\n            if (members == 1 && manMembers <= 1) {\n                return false;\n            }\n            if (manMembers == 1) {\n                return false;\n            }\n\n            return true;\n        }\n\n        /**\n         * Called to pull the current iteration value from the log panel.\n         *\n         * @return {number}\n         */\n        function getCurrentIteration() {\n\n            var lpv = logPanel.innerHTML.split('<br>');\n\n            if (lpv[2] && lpv[2].startsWith(langStrings.iteration)) {\n                return parseInt(lpv[2].split(' ')[1]);\n            } else {\n                return null;\n            }\n        }\n\n        /**\n         * Called to copy centroid data from replayData for manual clustering.\n         */\n        function copyReplayData() {\n\n            for (var iter in replayData) {\n                if (iter >= 0) {\n                    continue;\n                }\n                manualClusters[iter] = {};\n                for (var i = 0; i < replayData[iter].length; i++) {\n                    for (var member in replayData[iter][i].members) {\n\n                        var id = anonUserIds[replayData[iter][i].members[member].id];\n                        manualClusters[iter][id] = i;\n                    }\n                }\n            }\n        }\n\n        /**\n         * Called to render the centroids and hulls for manual clustering results.\n         *\n         * @param {number} currentIter - The current iteration value.\n         * @param {array} manData - The manual clustering data from server.\n         * @param {object} ids - The dataset, graph configuration, and clustering ids.\n         */\n        function drawManualClusters(currentIter, manData, ids) {\n\n            // Get data for hulls and centroids.\n            var hulls = [],\n                points = [],\n                i,\n                student;\n\n            for (i = 0; i < replayData[currentIter].length; i++) {\n                hulls[i] = {};\n                points[i] = [];\n\n                for (student in manualClusters[currentIter]) {\n                    if (manualClusters[currentIter][student] == i) {\n\n                        var x = scaledCentroids[student].x;\n                        var y = scaledCentroids[student].y;\n\n                        hulls[i][x + '_' + y] = {x: x, y: y, colour: centroids[i].colour};\n                        points[i][points[i].length] = [x, y];\n                    }\n                }\n            }\n\n            // Determine if there are manual centroids yet or not.\n            var l = document.getElementsByClassName('manual-centroid').length;\n            var noManualCentroids = l == 0 ? true : false;\n\n            // Make the polygon hulls and get new centroids.\n            ddd.selectAll('.manual-hull').remove();\n            for (i = 0; i < hulls.length; i++) {\n                makePolygonHull(hulls[i], (i + 1) * -1, true, noManualCentroids);\n                manualCentroids[i] = getClusteringCentroid(points[i]);\n            }\n\n            // Align client side copy of manual data with server.\n            if (manData) {\n\n                // Ensure all arrays are in place.\n                if (!manData[ids.did]) {\n                    manData[ids.did] = {};\n                }\n                if (!manData[ids.did][ids.gid]) {\n                    manData[ids.did][ids.gid] = {};\n                }\n                if (!manData[ids.did][ids.gid][ids.cid]) {\n                    manData[ids.did][ids.gid][ids.cid] = {};\n                }\n                if (!manData[ids.did][ids.gid][ids.cid][currentIter]) {\n                    manData[ids.did][ids.gid][ids.cid][currentIter] = [];\n                }\n\n                // Build membership data.\n                for (i = 0; i < manualCentroids.length; i++) {\n                    if (!manualCentroids[i]) {\n                        continue;\n                    }\n                    var members = [];\n\n                    for (student in manualClusters[currentIter]) {\n                        if (manualClusters[currentIter][student] == i) {\n\n                            members[members.length] = {\n                                id:  realUserIds[student],\n                                num: i\n                            };\n                        }\n                    }\n\n                    // Add new data to what came from the server.\n                    manData[ids.did][ids.gid][ids.cid][currentIter][i] = {\n                        centroidx: manualCentroids[i].x,\n                        centroidy: manualCentroids[i].y,\n                        members:   members\n                    };\n                }\n            }\n\n            // Draw clustering centroids.\n            if (noManualCentroids) {\n                drawManualCentroids();\n            } else {\n                drawAnimatedManualCentroids();\n            }\n\n            graph.selectAll('.centroid').raise();\n            graph.selectAll('.clustering-centroid').raise();\n            graph.selectAll('.manual-centroid').raise();\n        }\n\n        /**\n         * Function to stop event propagation.\n         */\n        function stopProp() {\n\n            ddd.event.stopPropagation();\n        }\n\n        /**\n         * Draws the cluster centroid points during manual clustering during replay.\n         */\n        function drawManualCentroids() {\n\n            ddd.selectAll('.manual-centroid').remove();\n            var o = 14;\n\n            for (var i = 0, x, y; i < manualCentroids.length; i++) {\n\n                if (!manualCentroids[i]) {\n                    return;\n                }\n\n                x = manualCentroids[i].x;\n                y = manualCentroids[i].y;\n\n                graph.append('line')\n                    .attr('class', 'manual-centroid')\n                    .attr('id', 'manual1-' + i)\n                    .attr('x1', x - o)\n                    .attr('y1', y - o)\n                    .attr('x2', x + o)\n                    .attr('y2', y + o)\n                    .style('stroke', centroids[i].colour)\n                    .style('stroke-width', '5px')\n                    .style('opacity', 0)\n                    .on('click', stopProp)\n                    .on('click.centroidClick', centroidClick.bind(this, (i + 1) * -1, i, true))\n                    .on('mouseover', clusteroidMouseover.bind(this, i, true));\n\n                graph.append('line')\n                    .attr('class', 'manual-centroid')\n                    .attr('id', 'manual2-' + i)\n                    .attr('x1', x + o)\n                    .attr('y1', y - o)\n                    .attr('x2', x - o)\n                    .attr('y2', y + o)\n                    .style('stroke', centroids[i].colour)\n                    .style('stroke-width', '5px')\n                    .style('opacity', 0)\n                    .on('click', stopProp)\n                    .on('click.centroidClick', centroidClick.bind(this, (i + 1) * -1, i, true))\n                    .on('mouseover', clusteroidMouseover.bind(this, i, true));\n            }\n\n            // Transition in the manual centroids and hull.\n            ddd.selectAll('.manual-centroid').transition().duration(animTime)\n                .style('opacity', 0.5);\n            ddd.selectAll('.manual-hull').transition().duration(animTime)\n                .style('stroke-opacity', 1.0)\n                .style('fill-opacity', hullOpacity);\n        }\n\n        /**\n         * Draws the cluster centroid points.\n         */\n        function drawAnimatedManualCentroids() {\n\n            var o = 14;\n            for (var i = 0, x, y; i < manualCentroids.length; i++) {\n\n                if (!manualCentroids[i]) {\n                    ddd.selectAll('.manual-centroid').remove();\n                    return;\n                }\n\n                x = manualCentroids[i].x;\n                y = manualCentroids[i].y;\n\n                ddd.select('#manual1-' + i).transition().duration(animTime)\n                    .attr('x1', x - o)\n                    .attr('y1', y - o)\n                    .attr('x2', x + o)\n                    .attr('y2', y + o)\n                    .style('display', 'block');\n\n                ddd.select('#manual2-' + i).transition().duration(animTime)\n                    .attr('x1', x + o)\n                    .attr('y1', y - o)\n                    .attr('x2', x - o)\n                    .attr('y2', y + o)\n                    .style('display', 'block');\n            }\n        }\n\n        /**\n         * Called to change manual clustering when user changes replay iteration.\n         *\n         * @param {number} currentIter - The current iteration value\n         */\n        function updateManualClusters(currentIter) {\n\n            // Remove manual clustering results if before convergence.\n            if (!currentIter || currentIter > 0) {\n                graph.selectAll('.manual-centroid').remove();\n                graph.selectAll('.manual-hull').remove();\n                return;\n            }\n\n            // If no manual clustering has been done, nothing to update.\n            if (!haveManualClustering) {\n                return;\n            }\n\n            drawManualClusters(currentIter, null, null);\n        }\n\n        /**\n         * Called to change over/reset some global data for the next replay.\n         *\n         * @param {array} manData - The manual clustering data from the server.\n         * @return {object} - The new replay data.\n         */\n        function changeReplayData(manData) {\n\n            // Figure out which dataset is selected.\n            var sel = document.getElementById('replay-select');\n            var keys,\n                i;\n\n            for (i = 0; i < sel.options.length; i++) {\n                if (sel.options[i].selected) {\n                    keys = sel.options[i].value.split('_');\n                    break;\n                }\n            }\n            var datasetid = keys[0];\n            var coordsid = keys[1];\n            var clusterid = keys[2];\n\n            // Change the global data.\n            replayUserId = datasetid.split('-')[0];\n            coordsData.clusterId = clusterid;\n            lastChange = originalReplayData[datasetid][coordsid].last;\n            presetNodes = originalReplayData[datasetid][coordsid].nodes;\n            lordLinks = originalReplayData[datasetid][coordsid].links;\n            coordsScale = originalReplayData[datasetid][coordsid].scale;\n            modules = originalReplayData[datasetid][coordsid].mods;\n            replayData = originalReplayData[datasetid][coordsid][clusterid];\n            var islsa = originalReplayData[datasetid][coordsid].islsa;\n            logs = originalReplayData[datasetid][coordsid].logs;\n            users = originalReplayData[datasetid][coordsid].users;\n            comments = originalReplayData[datasetid][coordsid][clusterid].comments;\n\n            // Create map for anonymized id to real id.\n            anonUserIds = {};\n            realUserIds = {};\n            users.forEach(function(u) {\n                realUserIds[u.id] = u.realId;\n                anonUserIds[u.realId] = u.id;\n            });\n\n            clusterIters = 0;\n            clusterSliderValue = 1;\n\n            // Get max positive and negative iteration values.\n            positiveIters = 0;\n            negativeIters = 0;\n            for (var key in replayData) {\n                if (isNaN(key)) {\n                    continue;\n                } else if (key >= 0) {\n                    positiveIters++;\n                } else {\n                    negativeIters--;\n                }\n            }\n\n            // Reset manual clustering variables.\n            manualCentroids = [];\n            manualClusters = {};\n            haveManualClustering = false;\n            var manualData = manData[datasetid][coordsid][clusterid],\n                clusternum,\n                member;\n\n            if (manualData) {\n                haveManualClustering = true;\n\n                // Ensure manual clustering data available for all iterations.\n                for (i = -1; i >= negativeIters; i--) {\n                    if (manualData[i] && !manualData[i - 1]) {\n                        manualData[i - 1] = manualData[i];\n                    }\n\n                    manualClusters[i] = {};\n\n                    for (clusternum in manualData[i]) {\n                        for (member in manualData[i][clusternum].members) {\n\n                            var id = manualData[i][clusternum].members[member].id;\n                            manualClusters[i][anonUserIds[id]] = clusternum;\n                        }\n                    }\n                }\n            }\n\n            // Make the centroids.\n            centroids = [];\n            hullCentroids = {};\n            var ob = {},\n                ci = 0;\n\n            for (clusternum in replayData[1]) {\n                // Clustering centroids.\n                i = centroids.length;\n                centroids[i] = {x: 0, y: 0};\n\n                if (ci < centroidColours.length) {\n                    centroids[i].colour = centroidColours[ci++];\n                } else {\n                    var c;\n                    while (!c) {\n                        c = colours[Math.floor(prng.random() * colours.length)];\n                        c = centroidColours.includes(c) ? undefined : c;\n                    }\n                    centroids[i].colour = c;\n                }\n\n                // User centroids.\n                for (member in replayData[1][clusternum].members) {\n\n                    var anonId = anonUserIds[replayData[1][clusternum].members[member].id];\n                    hullCentroids[anonId] = {\n                        x: replayData[1][clusternum].members[member].x,\n                        y: replayData[1][clusternum].members[member].y\n                    };\n                    ob[anonId] = true;\n                }\n            }\n\n            return {members: ob, did: datasetid, gid: coordsid, cid: clusterid, islsa: islsa};\n        }\n\n        /**\n         * Called to make a student menu for the replay stage. The menu's values\n         * are needed, but the menu is not visible.\n         *\n         * @param {object} members - A group of userids who are members of a cluster\n         */\n        function fakeStudentMenu(members) {\n\n            // Fake user multiple select menu.\n            studentMenu = document.createElement('select');\n            studentMenu.multiple = true;\n            studentMenu.id = 'student-select';\n            studentMenu.style.display = 'none';\n\n            // Add users to the list.\n            colourIndex = 0;\n            users.forEach(function(u) {\n                addListItem(u, studentMenu);\n            });\n\n            // Determine which users to show and sync colours.\n            for (var i = 0, id; i < studentMenu.options.length; i++) {\n\n                id = studentMenu.options[i].value;\n\n                if (members[id]) {\n                    studentMenu.options[i].selected = true;\n                } else {\n                    studentMenu.options[i].selected = false;\n                }\n\n                if (hullCentroids[id]) {\n                    hullCentroids[id].colour = studentMenu.options[i].colour;\n                }\n            }\n\n            document.body.appendChild(studentMenu);\n        }\n\n        /**\n         * Called to scale normalized server coordinate values back into\n         * graphing and/or clustering space.\n         *\n         * @param {(array|object)} coords - The group of coordinates to scale\n         * @param {boolean} clusterScaling - Scale to clustering space as well?\n         */\n        function forwardScale(coords, clusterScaling) {\n\n            for (var key in coords) {\n                // Scale to graphing space.\n                coords[key].x *= coordsData.distance;\n                coords[key].x += coordsData.originalx;\n\n                coords[key].y *= coordsData.distance;\n                coords[key].y += coordsData.originaly;\n\n                if (clusterScaling) {\n                    // Scale to scaled clustering area.\n                    coords[key].x -= coordsData.centre.x;\n                    coords[key].x *= coordsData.scale;\n                    coords[key].x += width / 2;\n\n                    coords[key].y -= coordsData.centre.y;\n                    coords[key].y *= coordsData.scale;\n                    coords[key].y += height / 2;\n                }\n            }\n        }\n\n        /**\n         * Called to make the clustering replay animation control buttons.\n         */\n        function makeReplayControls() {\n\n            // Make the clustering control panel.\n            var ctrlDiv = document.getElementById('slider');\n\n            // Placeholder for status text.\n            var st = document.createElement('p');\n            st.innerHTML = '&nbsp';\n            st.id = 'replayer';\n            st.style.marginTop = '-20px';\n            ctrlDiv.appendChild(st);\n\n            // Placeholder for student drag and drop text.\n            var dd = document.createElement('p');\n            dd.innerHTML = '&nbsp';\n            dd.id = 'replaydragdrop';\n            dd.style.marginTop = '-12px';\n            ctrlDiv.appendChild(dd);\n\n            // Stop clustering control button.\n            var stop = document.createElement('button');\n            stop.id = 'replay-stop';\n            stop.innerHTML = '&#9606';\n            stop.className = \"btn btn-secondary\";\n            stop.addEventListener('click', replayStop);\n            stop.style.opacity = 0;\n            ctrlDiv.appendChild(stop);\n\n            // Play/pause clustering control button.\n            var playPause = document.createElement('button');\n            playPause.id = 'replay-pause';\n            playPause.innerHTML = '&#9654';\n            playPause.value = 'play';\n            playPause.className = \"btn btn-secondary\";\n            playPause.addEventListener('click', replayPause);\n            playPause.style.opacity = 0;\n            ctrlDiv.appendChild(playPause);\n\n            // Step back replay button.\n            var playStep1 = document.createElement('button');\n            playStep1.id = 'replay-back';\n            playStep1.innerHTML = '&#9614&#9664';\n            playStep1.className = \"btn btn-secondary\";\n            playStep1.addEventListener('click', replayBack);\n            playStep1.style.opacity = 0;\n            ctrlDiv.appendChild(playStep1);\n\n            // Step forward replay button.\n            var playStep2 = document.createElement('button');\n            playStep2.id = 'replay-forward';\n            playStep2.style.marginRight = '80px';\n            playStep2.innerHTML = '&#9654&nbsp&nbsp&#9614';\n            playStep2.className = \"btn btn-secondary\";\n            playStep2.addEventListener('click', replayForward.bind(this, true));\n            playStep2.style.opacity = 0;\n            ctrlDiv.appendChild(playStep2);\n\n            // Delete data button.\n            var del = document.createElement('button');\n            del.id = 'delete-button';\n            del.innerHTML = langStrings.delbutton;\n            del.className = \"btn btn-secondary\";\n            del.addEventListener('click', deleteClusteringData);\n            del.style.opacity = 0;\n            ctrlDiv.appendChild(del);\n\n            // Select analysis for prediction checkbox.\n            var l = document.createElement('label');\n            l.id = 'prediction-label';\n            l.style.opacity = 0;\n            l.style.marginLeft = '6px';\n            l.appendChild(document.createTextNode(langStrings.predictionbox));\n            ctrlDiv.appendChild(l);\n\n            var pred = document.createElement('input');\n            pred.type = 'checkbox';\n            pred.id = 'prediction-box';\n            pred.addEventListener('click', changePredictionAnalysis);\n            pred.style.opacity = 0;\n            pred.style.marginLeft = '2px';\n            ctrlDiv.appendChild(pred);\n        }\n\n        /**\n         * Called to change the analysis used for prediction.\n         */\n        function changePredictionAnalysis() {\n\n            var menu = document.getElementById('replay-select');\n            var selected = menu.options[menu.selectedIndex].value;\n            var uid = selected.split('_')[0].split('-')[0];\n\n            var out = {\n                userid: uid,\n                coordsid: lastChange,\n                clusterid: coordsData.clusterId,\n            };\n            callServer(predictionScript, out);\n            predictionAnalysis = out;\n        }\n\n        /**\n         * Called to delete the selected clustering data set.\n         */\n        function deleteClusteringData() {\n\n            if (confirm(langStrings.delconfirm)) {\n\n                var menu = document.getElementById('replay-select');\n                if (menu.selectedIndex > -1) {\n\n                    var value = menu.options[menu.selectedIndex].value;\n                    if (value.length > 0) {\n                        callServer(deleteScript, value.replace('-', '_'));\n                        menu.options[menu.selectedIndex] = null;\n                        replayStop();\n                    }\n                }\n            }\n        }\n\n        /**\n         * Called to stop replaying.\n         */\n        function replayStop() {\n\n            // Remove graph and clear log panel.\n            if (graph) {\n                setTimeout(function() {\n                    graph.remove();\n                    resetLogPanel();\n                    document.getElementById('replayer').innerHTML = '&nbsp;';\n                    document.getElementById('replaydragdrop').innerHTML = '&nbsp;';\n\n                    // Might be multiple comment textboxes open, remove them.\n                    for (var ctb in commentTextBoxes) {\n                        document.body.removeChild(commentTextBoxes[ctb].textbox);\n                        document.body.removeChild(commentTextBoxes[ctb].button);\n                    }\n                    commentTextBoxes = {};\n                }, 500);\n            }\n\n            replayData = undefined;\n            scaledCentroids = null;\n            resetPlayButton();\n\n            // Remove some things.\n            document.getElementById('clustering-replay-comment').innerHTML = '&nbsp';\n            document.getElementById('replay-stop').style.opacity = 0;\n            document.getElementById('replay-pause').style.opacity = 0;\n            document.getElementById('replay-back').style.opacity = 0;\n            document.getElementById('replay-forward').style.opacity = 0;\n            document.getElementById('delete-button').style.opacity = 0;\n            document.getElementById('prediction-label').style.opacity = 0;\n            document.getElementById('prediction-box').style.opacity = 0;\n\n            // Unselect selected clustering run.\n            var sel = document.getElementById('replay-select');\n\n            if (sel.selectedIndex > -1) {\n                sel.options[sel.selectedIndex].selected = false;\n            }\n        }\n\n        /**\n         * Called to reset the log panel.\n         */\n        function resetLogPanel() {\n            logPanel.readOnly = false;\n            logPanel.innerHTML = '';\n            setTimeout(function() {\n                logPanel.readOnly = true;\n            }, 300);\n        }\n\n        /**\n         * Called to reset the replay/pause button to its original state.\n         */\n        function resetPlayButton() {\n            var button = document.getElementById('replay-pause');\n            button.innerHTML = '&#9654';\n            button.value = 'play';\n            clearInterval(clusterAnimInterval);\n            clusterAnimInterval = undefined;\n        }\n\n        /**\n         * Called to play/pause the clustering replay animation.\n         */\n        function replayPause() {\n\n            // Trying to play without selecting a clustering run.\n            if (!replayData) {\n                return;\n            }\n            var button = document.getElementById('replay-pause');\n\n            // Playing.\n            if (button.value == 'play') {\n                button.innerHTML = '&#9613&#9613';\n                button.value = 'pause';\n                replayForward(false);\n                clusterAnimInterval = setInterval(replayForward.bind(this, false), 1200);\n\n            } else {\n                // Paused.\n                resetPlayButton();\n            }\n        }\n\n        /**\n         * Called to step the clustering replay forward.\n         *\n         * @param {boolean} resetPlay - Are we resetting the play button?\n         */\n        function replayForward(resetPlay) {\n\n            // Trying to replay without selecting anything.\n            if (!replayData) {\n                return;\n            }\n            if (resetPlay) {\n                resetPlayButton();\n            }\n\n            // Get next iteration value.\n            clusterIters++;\n            var actualIter = clusterIters - 1;\n\n            // Might be negative.\n            if (clusterIters > positiveIters && replayData[-1]) {\n                actualIter = positiveIters - clusterIters + 1;\n\n                // Keep from exceeding bounds.\n                if (!replayData[actualIter - 1]) {\n                    clusterIters--;\n                    resetPlayButton();\n                    return;\n                }\n            }\n            if (actualIter > positiveIters) {\n                clusterIters--;\n                resetPlayButton();\n                return;\n            }\n\n            // At initial replay position, remove graph and scale user centroids.\n            if (clusterIters == 1) {\n                clusterSliderValue = 2;\n                clustering = true;\n                noCentroidMouse = false;\n                clusteringCase2();\n\n            } else if (clusterIters == 2) {\n                // Next position, show random clustering centroids.\n                clusteringCase3();\n                runReplayIter(actualIter - 1, false, true);\n\n            } else {\n                // Regular, positive iteration, forward replay.\n                runReplayIter(actualIter - 1, false, false);\n            }\n        }\n\n        /**\n         * Called to step the clustering replay backward.\n         */\n        function replayBack() {\n\n            // Trying to replay without selecting anything or back too far.\n            if (!replayData || !replayCentroid || clusterIters - 1 < 0) {\n                return;\n            }\n            resetPlayButton();\n\n            // Get next iteration value.\n            clusterIters--;\n            var actualIter = clusterIters - 1;\n\n            // Might be negative.\n            if (clusterIters > positiveIters) {\n                actualIter = positiveIters - clusterIters + 1;\n            }\n\n            // Initial replay position, redraw graph with unscaled user centroids.\n            if (clusterIters == 0) {\n                clusterSliderValue = 1;\n                clusteringCase1();\n                clustering = false;\n                logPanel.innerHTML = logPanel.innerHTML.slice(logPanel.innerHTML.indexOf('<br><br>') + 8);\n                document.getElementById('replayer').innerHTML = '&nbsp;';\n                document.getElementById('replaydragdrop').innerHTML = '&nbsp;';\n\n            } else if (clusterIters == 1) {\n                // From second position, remove clustering centroids.\n                scaledCentroids = null;\n                clusteringCase2();\n                logPanel.innerHTML = logPanel.innerHTML.slice(logPanel.innerHTML.indexOf('<br><br>') + 8);\n                document.getElementById('replayer').innerHTML = '&nbsp;';\n                document.getElementById('replaydragdrop').innerHTML = '&nbsp;';\n\n            } else {\n                // Regular moving back with positive iteration values.\n                scaledCentroids = null;\n                runReplayIter(actualIter - 1, true, (clusterIters == 2));\n            }\n        }\n\n        /**\n         * Called to do a clustering replay iteration.\n         *\n         * @param {number} iter - The current iteration value\n         * @param {boolean} removeLog - Should the log panel entry be removed\n         * @param {boolean} firstRound - First itertation runs a bit different\n         */\n        function runReplayIter(iter, removeLog, firstRound) {\n\n            var hulls = [],\n                members = {},\n                i,\n                ob = {};\n\n            // For this iteration.\n            for (i = 0; i < replayData[iter].length; i++, ob = {}) {\n                graph.selectAll('#hull-' + i).remove();\n\n                // Make the clustering centroids.\n                centroids[i].x = replayData[iter][i].centroidx;\n                centroids[i].y = replayData[iter][i].centroidy;\n\n                // Get members for this cluster.\n                for (var member in replayData[iter][i].members) {\n\n                    var x = replayData[iter][i].members[member].x;\n                    var y = replayData[iter][i].members[member].y;\n                    var id = anonUserIds[replayData[iter][i].members[member].id];\n\n                    hullCentroids[id].x = x;\n                    hullCentroids[id].y = y;\n\n                    ob[x + '_' + y] = {x: x, y: y, colour: centroids[i].colour};\n\n                    members[id] = i;\n                }\n                hulls[i] = ob;\n            }\n\n            // Transform centroid coordinates.\n            forwardScale(centroids, true);\n\n            if (firstRound) {\n                drawClusteringCentroids();\n            } else {\n                // Transform member coordinates, scale to original graph.\n                forwardScale(hullCentroids, false);\n\n                // Make the polygon hulls.\n                for (i = 0; i < hulls.length; i++) {\n                    forwardScale(hulls[i], true);\n                    makePolygonHull(hulls[i], i, false, false);\n                }\n                // Draw clustering centroids.\n                drawAnimatedClusteringCentroids(animTime);\n            }\n            // Draw user centroids.\n            drawAnimatedCentroids(replayCentroid[2], replayCentroid[0],\n                                  replayCentroid[1], animTime);\n            graph.selectAll('.centroid').raise();\n            graph.selectAll('.clustering-centroid').raise();\n\n            updateManualClusters(iter);\n\n            // Write/remove clustering results to/from log panel.\n            if (removeLog) {\n                logPanel.innerHTML = logPanel.innerHTML.slice(logPanel.innerHTML.indexOf('<br><br>') + 8);\n            } else {\n                for (var key in members) {\n                    scaledCentroids[key].ci = members[key];\n                }\n                logClusteringResults(iter);\n                logManualClusteringResults(iter);\n            }\n\n            // Display status messages below replay menu.\n            if (iter < 0) {\n                document.getElementById('replayer').innerHTML = langStrings.convergence;\n                document.getElementById('replayer').style.color = 'green';\n\n                // Don't show the drag on message when researcher viewing anothers data.\n                if (isResearcher) {\n                    var opts = document.getElementById('replay-select').options;\n\n                    for (i = 0; i < opts.length; i++) {\n                        if (opts[i].selected) {\n                            var uid = opts[i].value.split('-')[0];\n                            if (uid == userId) {\n                                document.getElementById('replaydragdrop').innerHTML = langStrings.dragon;\n                            }\n                            break;\n                        }\n                    }\n                } else {\n                    document.getElementById('replaydragdrop').innerHTML = langStrings.dragon;\n                }\n            } else {\n                document.getElementById('replayer').innerHTML = langStrings.iteration + ' ' + iter;\n                document.getElementById('replayer').style.color = 'black';\n                document.getElementById('replaydragdrop').innerHTML = langStrings.dragoff;\n            }\n        }\n\n        /**\n         * Called to make the clustering animation control buttons.\n         *\n         * @return {HTMLElement}\n         */\n        function makeAnimationControls() {\n\n            // Make the clustering control panel.\n            var ctrlDiv = document.getElementById('anim-controls');\n            ctrlDiv.appendChild(document.createTextNode(langStrings.runkmeans));\n\n            // Placeholder for status text.\n            var st = document.createElement('p');\n            st.innerHTML = '&nbsp';\n            st.id = 'clustering';\n            ctrlDiv.appendChild(st);\n\n            // Placeholder for student drag and drop text.\n            var dd = document.createElement('p');\n            dd.innerHTML = '&nbsp';\n            dd.id = 'dragdrop';\n            dd.style.marginTop = '-12px';\n            ctrlDiv.appendChild(dd);\n\n            // Play/pause clustering control button.\n            var playPause = document.createElement('button');\n            playPause.id = 'play-pause';\n            playPause.style.marginLeft = '5px';\n            playPause.style.marginRight = '5px';\n            playPause.innerHTML = '&#9654'; // 9654=play.\n            playPause.className = \"btn btn-secondary\";\n            playPause.addEventListener('click', doPlayPause);\n            playPause.disabled = true;\n\n            // Steppng clustering control button.\n            var playStep = document.createElement('button');\n            playStep.id = 'play-step';\n            playStep.style.marginLeft = '5px';\n            playStep.innerHTML = '&#9654&nbsp&nbsp&#9614'; // 9654=play, 9614=bar.\n            playStep.className = \"btn btn-secondary\";\n            playStep.addEventListener('click', doPlayStep.bind(this, playPause));\n            playStep.disabled = true;\n\n            ctrlDiv.appendChild(playStep);\n            ctrlDiv.appendChild(playPause);\n\n            // Stop clustering control button.\n            var stop = document.createElement('button');\n            stop.id = 'stop';\n            stop.style.marginTop = '5px';\n            stop.style.marginLeft = '5px';\n            stop.innerHTML = langStrings.reset;\n            stop.className = \"btn btn-secondary\";\n            stop.addEventListener('click', stopClustering);\n            ctrlDiv.appendChild(stop);\n\n            return ctrlDiv;\n        }\n\n        /**\n         * Event listener for stop clustering button. Will reset clustering parameters\n         * so clustering can be restarted.\n         */\n        function stopClustering() {\n\n            // Reset clustering stuff.\n            clustering = false;\n            clusterIters = 0;\n            clearInterval(clusterAnimInterval);\n            clusterAnimInterval = undefined;\n            coordsData.clusterId = Date.now();\n            clusterSlider.removeAttribute('disabled');\n\n            // Remove clustering name text box and button.\n            document.getElementById('clustering-replay-comment').innerHTML = '&nbsp';\n\n            // Reset cluster slider.\n            if (clusterSliderValue == 3) {\n                clusterSlider.noUiSlider.set(2);\n                setTimeout(function() {\n                    clusterSlider.noUiSlider.set(1);\n                    clusterSliderValue = 1;\n                }, animTime);\n            } else {\n                clusterSlider.noUiSlider.set(1);\n                clusterSliderValue = 1;\n            }\n\n            // Reset displayed text.\n            document.getElementById('clustering').innerHTML = '&nbsp';\n            document.getElementById('dragdrop').innerHTML = '&nbsp';\n            document.getElementById('play-pause').innerHTML = '&#9654'; // 9654=play.\n            document.getElementById('play-pause').disabled = true;\n            document.getElementById('play-step').disabled = true;\n\n            if (document.getElementById('num-clusters')) {\n                document.getElementById('num-clusters').readOnly = false;\n                document.getElementById('num-clusters').value = '';\n            }\n\n            // Remove clustering centroids and hulls.\n            ddd.selectAll('.clustering-centroid')\n                .transition(trans).style.display = 'none';\n            ddd.selectAll('.cluster-hull')\n                .transition(trans).style.display = 'none';\n\n            setTimeout(function() {\n                ddd.selectAll('.clustering-centroid').remove();\n                ddd.selectAll('.cluster-hull').remove();\n                resetLogPanel();\n            }, animTime);\n\n            // Reset cluster membership.\n            for (var key in scaledCentroids) {\n                scaledCentroids[key].ci = undefined;\n            }\n        }\n\n        /**\n         * Event listener for play/step button. Will pause a running clustering\n         * animation or run a single clustering iteration.\n         *\n         * @param {HTMLElement} playPause - The play/pause button\n         */\n        function doPlayStep(playPause) {\n\n            // Only allow when on clustering stage of cluster slider.\n            if (clusterSliderValue != 3) {\n                return;\n            }\n            // Already playing, then just pause.\n            if (clusterAnimInterval) {\n                clearInterval(clusterAnimInterval);\n                clusterAnimInterval = undefined;\n                playPause.innerHTML = '&#9654'; // 9654=play.\n                clusterSlider.removeAttribute('disabled');\n            } else {\n                // Run single iteration.\n                runClusteringIter();\n            }\n        }\n\n        /**\n         * Event listener for clustering play/pause button. Will start a clustering\n         * animation or pause a running animation.\n         */\n        function doPlayPause() {\n\n            // Only allow when on clustering stage of cluster slider.\n            if (clusterSliderValue != 3) {\n                return;\n            }\n            // Play.\n            if (!clusterAnimInterval) {\n                clusterAnimInterval = setInterval(runClusteringIter, 1000);\n                this.innerHTML = '&#9613&#9613'; // 9613=bar.\n                clusterSlider.setAttribute('disabled', true);\n\n            } else {\n                // Pause.\n                clearInterval(clusterAnimInterval);\n                clusterAnimInterval = undefined;\n                this.innerHTML = '&#9654'; // 9654=play.\n                clusterSlider.removeAttribute('disabled');\n            }\n        }\n\n        /**\n         * Called to add the clustering name and button to the navigation area.\n         */\n        function addClusteringNameToNavigation() {\n\n            var header = document.getElementById('clustering-replay-comment');\n\n            var textBox = document.createElement('input');\n            textBox.type = 'text';\n            textBox.className = 'form-control custom-control mr-1';\n            textBox.style.width = '160px';\n            textBox.style.marginRight = '10px';\n            textBox.id = 'clustering-replay-comment-text';\n\n            if (comments[0]) {\n                textBox.value = comments[0];\n            } else {\n                textBox.placeholder = langStrings.clusteringname;\n            }\n            header.appendChild(textBox);\n\n            var button = document.createElement('button');\n            button.innerHTML = langStrings.clusteringnamebutton;\n            button.className = 'btn btn-primary';\n            header.appendChild(button);\n\n            button.addEventListener('click', function() {\n\n                // Only allow the owner of this data to change the name.\n                if (replayUserId == userId) {\n\n                    // Do not call server if the text area is empty or has not changed.\n                    if (textBox.value != '') {\n\n                        // The comment data for the server.\n                        var data = {\n                            'coordsid':  lastChange,\n                            'clusterid': coordsData.clusterId,\n                            'studentid': 0,\n                            'remark':    textBox.value\n                        };\n\n                        callServer(commentsScript, data);\n\n                        // Figure out which dataset is selected when replaying.\n                        var sel = document.getElementById('replay-select');\n                        if (sel) {\n                            var keys;\n\n                            for (var i = 0; i < sel.options.length; i++) {\n                                if (sel.options[i].selected) {\n                                    keys = sel.options[i].value.split('_');\n                                    break;\n                                }\n                            }\n                            var datasetid = keys[0];\n                            var coordsid = keys[1];\n                            var clusterid = keys[2];\n\n                            // Change the global data.\n                            originalReplayData[datasetid][coordsid][clusterid].comments[0] = textBox.value;\n                        }\n                    }\n                }\n            });\n        }\n\n        /**\n         * Function to run a clustering iteration.\n         */\n        function runClusteringIter() {\n\n            // First round?\n            if (clusterIters == 0) {\n\n                clustering = true;\n                addClusteringNameToNavigation();\n\n                // Get the number of clusters from the user.\n                var nm = document.getElementById('num-clusters');\n                var v = parseInt(nm.value);\n\n                // Ensure sane k value.\n                if (isNaN(v) || v < 2) {\n                    v = 3;\n                }\n                var ob = {};\n                for (var key in hullCentroids) {\n                    ob[hullCentroids[key].x + \"_\" + hullCentroids[key].y] = 1;\n                }\n                while (v > Object.keys(ob).length) {\n                    v--;\n                }\n                nm.value = v;\n                nm.readOnly = true;\n\n                // Get initial random cluster centroids.\n                centroids = [];\n                oldCentroids = null;\n\n                // Assign random locations and colours to centroids.\n                var i,\n                    ci;\n                for (i = 0, ci = 0; i < v; i++) {\n\n                    if (ci < centroidColours.length) {\n                        centroids[i] = getRandomCentroid(null, centroidColours[ci++]);\n                    } else {\n                        var c;\n                        while (!c) {\n                            c = colours[Math.floor(prng.random() * colours.length)];\n                            c = centroidColours.includes(c) ? undefined : c;\n                        }\n                        centroids[i] = getRandomCentroid(null, c);\n                    }\n                }\n                drawClusteringCentroids();\n\n                document.getElementById('clustering').innerHTML = langStrings.randcentroids;\n                document.getElementById('dragdrop').innerHTML = langStrings.dragoff;\n                document.getElementById('clustering').style.color = 'black';\n\n                // Show clustering results in log panel.\n                var clusterMembers = logClusteringResults(clusterIters);\n\n                // Log clustering iteration at server.\n                coordsData.iteration = clusterIters;\n                sendClustersToServer(clusterMembers);\n            } else {\n                // Not the first iteration, just run it.\n                runKMeans(clusterIters);\n                drawAnimatedClusteringCentroids(animTime);\n            }\n\n            clusterIters++;\n\n            // Check for convergence.\n            if (document.getElementById('clustering').innerHTML == langStrings.convergence) {\n\n                clearInterval(clusterAnimInterval);\n                clusterAnimInterval = undefined;\n                clusterSlider.removeAttribute('disabled');\n                document.getElementById('play-pause').innerHTML = '&#9654';\n                document.getElementById('play-pause').disabled = true;\n                document.getElementById('play-step').disabled = true;\n            }\n        }\n\n        /**\n         * Called to get a random clustering centroid.\n         *\n         * @param {object} ctd - The old centroid point\n         * @param {string} col - The colour of centroid\n         * @return {object}\n         */\n        function getRandomCentroid(ctd, col) {\n\n            // Keep away from edges of window.\n            var offset = 100;\n            var MX = width - offset,\n                mx = offset,\n                MY = height - offset,\n                my = offset,\n                rx,\n                ry,\n                dx,\n                dy,\n                d = 0;\n\n            // If this centroid has been made before.\n            if (ctd) {\n                // Ensure the new random centroid is not too close to the old one,\n                // can cause premature convergence.\n                while (d < 100) {\n                    rx = Math.floor(Math.random() * (MX - mx) + mx);\n                    ry = Math.floor(Math.random() * (MY - my) + my);\n                    dx = rx - ctd.x;\n                    dy = ry - ctd.y;\n                    d = Math.sqrt(dx * dx + dy * dy);\n                }\n            } else {\n                // First time this centroid is made.\n                rx = Math.floor(Math.random() * (MX - mx) + mx);\n                ry = Math.floor(Math.random() * (MY - my) + my);\n            }\n\n            return {x: rx, y: ry, colour: col};\n        }\n\n        /**\n         * Draws the cluster centroid points.\n         */\n        function drawClusteringCentroids() {\n\n            ddd.selectAll('.clustering-centroid').remove();\n            var o = 14,\n                i,\n                x,\n                y;\n\n            for (i = 0; i < centroids.length; i++) {\n\n                x = centroids[i].x;\n                y = centroids[i].y;\n\n                graph.append('line')\n                    .attr('class', 'clustering-centroid')\n                    .attr('id', 'cluster1-' + i)\n                    .attr('x1', x - o)\n                    .attr('y1', y - o)\n                    .attr('x2', x + o)\n                    .attr('y2', y + o)\n                    .style('stroke', centroids[i].colour)\n                    .style('stroke-width', '5px')\n                    .on('click', stopProp)\n                    .on('click.centroidClick', centroidClick.bind(this, (i + 1) * -1, i, true))\n                    .on('mouseover', clusteroidMouseover.bind(this, i, false));\n\n                graph.append('line')\n                    .attr('class', 'clustering-centroid')\n                    .attr('id', 'cluster2-' + i)\n                    .attr('x1', x + o)\n                    .attr('y1', y - o)\n                    .attr('x2', x - o)\n                    .attr('y2', y + o)\n                    .style('stroke', centroids[i].colour)\n                    .style('stroke-width', '5px')\n                    .on('click', stopProp)\n                    .on('click.centroidClick', centroidClick.bind(this, (i + 1) * -1, i, true))\n                    .on('mouseover', clusteroidMouseover.bind(this, i, false));\n            }\n        }\n\n        /**\n         * Function to build a common links set for clustered students.\n         *\n         * @param {array} studentKeys - Array of student ids.\n         * @param {object} notNodes - Non-visible graph nodes.\n         * @param {number} numStudents - The number of students.\n         * @return {array} common - The common link set.\n         */\n        function getCommonLinks(studentKeys, notNodes, numStudents) {\n\n            // Build a linkset from all the students in this cluster.\n            var links = {},\n                student,\n                link,\n                s,\n                t,\n                id,\n                i;\n\n            for (student in studentKeys) {\n                for (i = sliderValues[0]; i < graphData.edges[student].length && i <= sliderValues[1]; i++) {\n\n                    // Parse out the souce and target ids.\n                    link = graphData.edges[student][i];\n\n                    if (typeof link.source == 'string') {\n                        s = parseInt(link.source);\n                        t = parseInt(link.target);\n                    } else {\n                        s = link.source.id;\n                        t = link.target.id;\n                    }\n\n                    // Don't link to an invisible node.\n                    if (notNodes[s] || notNodes[t]) {\n                        continue;\n                    }\n                    id = s + '_' + t;\n\n                    // Add the link to the link set, considering weights.\n                    if (!links[id]) {\n                        links[id] = {};\n                        links[id][student] = 1;\n                    } else if (!links[id][student]) {\n                        links[id][student] = 1;\n                    } else {\n                        links[id][student]++;\n                    }\n                }\n            }\n\n            // Determine which links in the link set are common.\n            var common = [],\n                lid,\n                key;\n\n            for (lid in links) {\n                // Common links will be in all students link sets.\n                if (Object.keys(links[lid]).length == numStudents) {\n\n                    // Use the lowest weight among the students.\n                    var min = Number.MAX_SAFE_INTEGER;\n\n                    for (key in links[lid]) {\n                        if (min > links[lid][key]) {\n                            min = links[lid][key];\n                        }\n                    }\n\n                    // Make the common link.\n                    var split = lid.split('_');\n\n                    if (useLSA) {\n                        common[common.length] = {\n                            source: getEqualToNode(split[0]),\n                            target: getEqualToNode(split[1]),\n                            weight: min,\n                            colour: 'black'\n                        };\n                    } else {\n                        common[common.length] = {\n                            source: split[0],\n                            target: split[1],\n                            weight: min,\n                            colour: 'black'\n                        };\n                    }\n                }\n            }\n            // Keep the section to module links.\n            for (i = 0; i < graphData.links.length; i++) {\n                common[common.length] = graphData.links[i];\n            }\n\n            return common;\n        }\n\n        /**\n         * Mouse listener for the cluster centroids. This function will\n         * determine the common links among the students in a cluster and\n         * display these common links. The graph and links will remain in place\n         * so the user can preview a node. Clicking anywhere in the graph area\n         * will remove the common links graph.\n         *\n         * @param {number} k - The cluster number\n         * @param {boolean} manualClustering - Is called for manual cluster?\n         */\n        function clusteroidMouseover(k, manualClustering) {\n\n            graphLinks.remove();\n\n            // Change mouse listeners, normal method no work??\n            noCentroidMouse = true;\n            noNodeMouse = false;\n\n            iframeStaticPos = true;\n\n            // Remove graph when user clicks somewhere.\n            graph.on('click', removeGraph);\n\n            // Get the students in cluster k.\n            var studentKeys = {},\n                key;\n            if (manualClustering) {\n                var currentIter = getCurrentIteration();\n\n                for (key in manualClusters[currentIter]) {\n                    if (manualClusters[currentIter][key] == k) {\n                        studentKeys[key] = key;\n                    }\n                }\n            } else {\n                for (key in scaledCentroids) {\n                    if (scaledCentroids[key].ci == k) {\n                        studentKeys[key] = key;\n                    }\n                }\n            }\n            var numStudents = Object.keys(studentKeys).length;\n\n            // Get the non-visible nodes.\n            var notNodes = {},\n                i;\n            for (i = 0; i < graphData.nodes.length; i++) {\n                if (!graphData.nodes[i].visible) {\n                    notNodes[graphData.nodes[i].id] = 1;\n                }\n            }\n\n            var common = getCommonLinks(studentKeys, notNodes, numStudents);\n\n            // Show the graph with common links.\n            graphNodes\n                .style('display', 'block')\n                .style('opacity', 1.0)\n                .on('mouseover', mouseover)\n                .on('mouseout', mouseout);\n\n            if (!useLSA) {\n                simulation.force('link').links(common);\n            }\n            makeLinks(common);\n\n            graphLinks\n                .on('mouseover', linkMouseover)\n                .on('mouseout', mouseout);\n\n            simulation.restart();\n            setTimeout(function() {\n                simulation.stop();\n                graphLinks.lower();\n                ddd.selectAll('.cluster-hull').lower();\n            }, 10);\n        }\n\n        /**\n         * Event listener for clustering stage, used when showing the common\n         * links to remove the common links graph.\n         */\n        function removeGraph() {\n\n            noCentroidMouse = false;\n            noNodeMouse = true;\n            iframeStaticPos = false;\n\n            graphLinks.remove();\n\n            graphNodes\n                .style('display', 'none')\n                .on('mouseover', null)\n                .on('mouseout', null);\n\n            graph.on('click', null);\n        }\n\n        /**\n         * Event listener for links when common links graph is showing.\n         *\n         * @param {object} link - The link that was hovered over\n         */\n        function linkMouseover(link) {\n\n            // Ignore if not a common link.\n            if (link.colour != 'black') {\n                return;\n            }\n            // Remove listeners so they are not called again as mouse moves.\n            graphLinks.on('mouseover', null);\n\n            graphNodes\n                .on('mouseover', null)\n                .on('mouseout', null);\n\n            ddd.selectAll('.clustering-centroid')\n                .on('mouseover', null);\n\n            // Call event listener manually to create text boxes and iframes.\n            mouseover(link.source, false);\n            iframeRight = true;\n            mouseover(link.target, true);\n            iframeRight = false;\n        }\n\n        /**\n         * Clustering function, does only 1 iteration per call.\n         *\n         * @param {number} iter - The clustering iteration value\n         */\n        function runKMeans(iter) {\n\n            // Check for convergence.\n            if (document.getElementById('clustering').innerHTML == langStrings.convergence) {\n                return;\n            } else if (Object.keys(scaledCentroids).length == 0) {\n                // ... or nothing to cluster.\n                document.getElementById('clustering').innerHTML = langStrings.convergence;\n                return;\n            }\n\n            var out = langStrings.iteration + ': ' + iter,\n                key,\n                i,\n                dx,\n                dy;\n\n            // Assign each student to a cluster.\n            for (key in scaledCentroids) {\n                scaledCentroids[key].ci = getNewCluster(scaledCentroids[key]);\n            }\n\n            // Calculate the new centroids.\n            var newCentroids = [];\n\n            for (i = 0; i < centroids.length; i++) {\n                newCentroids[i] = getNewCentroid(i);\n            }\n\n            // Swap centroid sets.\n            oldCentroids = centroids;\n            centroids = newCentroids;\n\n            // If this is not the first iteration, check for convergence.\n            var converged = false;\n            if (oldCentroids) {\n\n                // Calculate the total distance moved by all centroids.\n                var total = 0;\n\n                for (i = 0; i < centroids.length; i++) {\n\n                    dx = oldCentroids[i].x - centroids[i].x;\n                    dy = oldCentroids[i].y - centroids[i].y;\n                    total += Math.sqrt(dx * dx + dy * dy);\n                }\n\n                // If the total distance is less than threshold, then convergence.\n                if (total <= convergenceDistance) {\n                    out = langStrings.convergence;\n                    document.getElementById('clustering').style.color = 'green';\n                    converged = true;\n                }\n            }\n\n            // Update clustering status text.\n            document.getElementById('clustering').innerHTML = out;\n            document.getElementById('dragdrop').innerHTML =\n                iter > 0 && !converged ? langStrings.dragon : langStrings.dragoff;\n\n            // Show clustering results in log panel.\n            var clusterMembers = logClusteringResults(iter);\n\n            // Log clustering iteration at server.\n            coordsData.iteration = converged ? -1 : iter;\n            sendClustersToServer(clusterMembers);\n        }\n\n        /**\n         * Called to get a new centroid after reassigning students to clusters.\n         *\n         * @param {number} k - The cluster number\n         * @return {object}\n         */\n        function getNewCentroid(k) {\n\n            var arr = [],\n                ob = {},\n                key;\n\n            // For the students in cluster k.\n            for (key in scaledCentroids) {\n\n                if (scaledCentroids[key].ci == k) {\n\n                    arr[arr.length] = [scaledCentroids[key].x, scaledCentroids[key].y];\n\n                    ob[scaledCentroids[key].x + '_' + scaledCentroids[key].y] = {\n                        x: scaledCentroids[key].x,\n                        y: scaledCentroids[key].y,\n                        colour: centroids[k].colour\n                    };\n                }\n            }\n\n            // Remove old hull and make a new one.\n            graph.selectAll('#hull-' + k).remove();\n            makePolygonHull(ob, k, false, false);\n            graph.selectAll('.centroid').raise();\n            graph.selectAll('.clustering-centroid').raise();\n\n            // Using an object to ensure only unique points are considered\n            // importing logs multiple times can result in identical student records\n            // that leave student centroids overlapped, which causes problems with\n            // the centroid calculation.\n            var ok = Object.keys(ob);\n\n            // No students assigned to cluster, regenerate cluster centroid.\n            if (ok.length == 0) {\n                return getRandomCentroid(centroids[k], centroids[k].colour);\n            } else {\n                var ctd = getClusteringCentroid(arr);\n                ctd.colour = centroids[k].colour;\n                return ctd;\n            }\n        }\n\n        /**\n         * Gets the clustering centroid, accounting for all student points,\n         * even if the points overlap.\n         *\n         * @param {array} arr - The array of student centroid points\n         * @return {object}\n         */\n        function getClusteringCentroid(arr) {\n\n            if (arr.length == 0) {\n                return null;\n            }\n            var tx = 0,\n                ty = 0,\n                i;\n\n            // Sum all points.\n            for (i = 0; i < arr.length; i++) {\n                tx += arr[i][0];\n                ty += arr[i][1];\n            }\n\n            // Centroid is mean of summation.\n            return {x: tx / arr.length, y: ty / arr.length};\n        }\n\n        /**\n         * Log the clustering results to the log panel and get membership data for server.\n         *\n         * @param {number} iter - The clustering iteration number\n         * @return {array}\n         */\n        function logClusteringResults(iter) {\n\n            // Log panel text.\n            var lpt = langStrings.numstudents + ': ' + Object.keys(scaledCentroids).length + '<br>' +\n                langStrings.numofclusters + ': ' + centroids.length + '<br>' +\n                langStrings.iteration + ': ' + iter + '<br>';\n\n            if (document.getElementById('clustering') &&\n                document.getElementById('clustering').innerHTML == langStrings.convergence) {\n\n                lpt += '<span style=\"color:green\">' + langStrings.convergence + '</span><br>';\n            }\n\n            // Get membership data for log panel and server.\n            var serverData = [],\n                i,\n                dx,\n                dy,\n                d,\n                key,\n                c;\n\n            for (i = 0; i < centroids.length; i++) {\n\n                dx = centroids[i].x - width / 2;\n                dy = centroids[i].y - height / 2;\n                d = Math.sqrt(dx * dx + dy * dy);\n                c = centroids[i].colour;\n\n                // Add distance to cluster.\n                lpt += langStrings.disttocluster + ' <span style=\"color:' + c + '\">' +\n                    c + '</span>: ' + Math.round(d, 2) + '<br>' + langStrings.cluster +\n                    ' ' + c + ' ' + langStrings.members + ': ' + '[';\n\n                serverData[i] = [];\n\n                // Add members for this cluster.\n                for (key in scaledCentroids) {\n                    if (scaledCentroids[key].ci == i) {\n                        lpt += key + ', ';\n                        serverData[i][serverData[i].length] = key;\n                    }\n                }\n                // Remove trailing comma.\n                if (lpt.indexOf(',', lpt.length - 3) != -1) {\n                    lpt = lpt.slice(0, -2);\n                }\n                lpt += ']<br>';\n            }\n            lpt += '<br>';\n\n            // Write iteration results to log panel.\n            logPanel.innerHTML = lpt + logPanel.innerHTML;\n\n            return serverData;\n        }\n\n        /**\n         * Function called to send the cluster data to the server for logging.\n         *\n         * @param {array} members - An array of arrays representing the clustering membership\n         */\n        function sendClustersToServer(members) {\n\n            var out = {clusterCoords: []},\n                i,\n                j,\n                rsd;\n\n            for (i = 0; i < members.length; i++) {\n\n                // Get the reversed centroid coordinate.\n                out.clusterCoords[i] = reverseScale(centroids[i]);\n                out.clusterCoords[i].num = i;\n\n                // Map anonymized student id back to real id for server.\n                for (j = 0; j < members[i].length; j++) {\n                    rsd = reverseScale(scaledCentroids[members[i][j]]);\n                    members[i][j] = {\n                        id:  realUserIds[members[i][j]],\n                        num: i,\n                        x:   rsd.x,\n                        y:   rsd.y\n                    };\n                }\n            }\n\n            out.members = members;\n            out.iteration = coordsData.iteration;\n            out.clusterId = coordsData.clusterId;\n            out.coordsid = lastChange;\n            out.usegeometric = useGeometricCentroids ? 1 : 0;\n\n            // Prevent further server side clustering if partial time slice clustered.\n            if ((sliderValues[0] != 0 || sliderValues[1] != graphData.maxSession) &&\n                    out.iteration < 0) {\n                out.iteration = clusterIters;\n            }\n\n            callServer(clustersScript, out);\n        }\n\n        /**\n         * Function called to reverse the scaling and translation done to centroids.\n         * The reversed values are normalized to the same coordinate space as the\n         * module coordinates stored at the server.\n         *\n         * @param {object} centroid - The centroid point to reverse scale/translate\n         * @return {object}\n         */\n        function reverseScale(centroid) {\n\n            // Reverse the scaling and translation done to the centroids when clustering.\n            var newx = ((centroid.x - width / 2) / coordsData.scale) + coordsData.centre.x;\n            var newy = ((centroid.y - height / 2) / coordsData.scale) + coordsData.centre.y;\n\n            // Original node coords are normalized in DB, scaled and translated into\n            // position on screen, reverse screen scale and translate to return to\n            // normalized DB coordinate space.\n            newx = (newx - coordsData.originalx) / coordsData.distance;\n            newy = (newy - coordsData.originaly) / coordsData.distance;\n\n            return {x: newx, y: newy};\n        }\n\n        /**\n         * Draws the cluster centroid points.\n         *\n         * @param {number} t - The time of animation transition duration\n         */\n        function drawAnimatedClusteringCentroids(t) {\n\n            var o = 14,\n                i,\n                x,\n                y;\n            for (i = 0; i < centroids.length; i++) {\n\n                x = centroids[i].x;\n                y = centroids[i].y;\n\n                ddd.select('#cluster1-' + i).transition().duration(t)\n                    .attr('x1', x - o)\n                    .attr('y1', y - o)\n                    .attr('x2', x + o)\n                    .attr('y2', y + o);\n\n                ddd.select('#cluster2-' + i).transition().duration(t)\n                    .attr('x1', x + o)\n                    .attr('y1', y - o)\n                    .attr('x2', x - o)\n                    .attr('y2', y + o);\n            }\n        }\n\n        /**\n         * Called to make the clustering slider for the clustering screen.\n         *\n         * @param {string} ph - A placeholder text for text box\n         * @param {HTMLElement} ctrlDiv - The control panel div\n         */\n        function makeClusterSlider(ph, ctrlDiv) {\n\n            // Make the clustering slider.\n            clusterSlider = document.getElementById('cluster-slider');\n            slider.create(clusterSlider, {\n                start: [1],\n                handles: 1,\n                range: {\n                    min: 1,\n                    max: 3\n                },\n                step: 1,\n                orientation: 'vertical',\n                direction: 'rtl',\n                pips: {\n                    mode: 'steps',\n                    stepped: true,\n                    density: 100,\n                    filter: function() {\n                        return 1;\n                    },\n                    format: {\n                        to: function(value) {\n                            switch (value) {\n                                case 1: return langStrings.showcentroids;\n                                case 2: return langStrings.removegraph;\n                                case 3: return ph;\n                                default: return '';\n                            }\n                        },\n                        from: function() {\n                            return '';\n                        }\n                    }\n                }\n            });\n\n            // Add the event listener to the clustering slider.\n            clusterSlider.noUiSlider.on('update', updateClusterSlider);\n\n            // Figure out dimensions for clustering slider.\n            clusterSlider.style = 'margin-top: 20px;';\n\n            var btH = clusterButton.getBoundingClientRect().height;\n            var ctH = ctrlDiv.getBoundingClientRect().height;\n\n            clusterSlider.style.height = (height - btH - ctH - 120) + 'px';\n\n            // Add radio buttons for geometric/decomposed centroid calculation.\n            var radio = document.createElement('input');\n            radio.type = 'radio';\n            radio.name = 'centroid-type';\n            radio.value = 'geometric';\n            radio.style = 'margin-top: 40px';\n            radio.checked = true;\n            radio.addEventListener('click', radioClick);\n\n            var label = document.createElement('label');\n            label.appendChild(radio);\n            label.appendChild(document.createTextNode(langStrings.geometrics));\n            clusterSlider.appendChild(label);\n\n            // No decomposed button when using LORD.\n            if (Object.keys(lordLinks).length == 0) {\n\n                radio = document.createElement('input');\n                radio.type = 'radio';\n                radio.name = 'centroid-type';\n                radio.value = 'decomposed';\n                radio.addEventListener('click', radioClick);\n\n                label = document.createElement('label');\n                label.appendChild(radio);\n                label.appendChild(document.createTextNode(langStrings.decomposed));\n                clusterSlider.appendChild(label);\n            }\n        }\n\n        /**\n         * Event listener for radio buttons, which swaps centroid types when called.\n         */\n        function radioClick() {\n\n            useGeometricCentroids = this.value == 'geometric' ? true : false;\n            graph.selectAll('.centroid').remove();\n\n            // Fake student menu options array, not available here.\n            var options = [],\n                i = 0,\n                student;\n            for (student in hullCentroids) {\n\n                options[i++] = {\n                    value:    student,\n                    selected: true,\n                    colour:   hullCentroids[student].colour\n                };\n            }\n\n            // Calculate the centroids and restart clustering.\n            if (useGeometricCentroids) {\n                getGeometricCentroids(options);\n            } else {\n                getDecomposedCentroids(options);\n            }\n            doCluster();\n        }\n\n        /**\n         * Event listener for cluster slider, which controls certain aspects of the\n         * clustering stage.\n         *\n         * @param {array} values - The slider values\n         * @param {number} handle - The slider handle, index into values array\n         */\n        function updateClusterSlider(values, handle) {\n\n            var radios,\n                r;\n\n            switch (parseInt(values[handle])) {\n\n                // Default position, graph is shown with student centroids.\n                case 1:\n\n                    // Don't jump from 3 to 1, step to 2 instead.\n                    if (clusterSliderValue == 3) {\n                        clusterSlider.noUiSlider.set(2);\n                        break;\n                    }\n                    clusterSliderValue = 1;\n                    clusteringCase1();\n\n                    // If not clustering, then enable centroid type radio buttons.\n                    if (!clustering) {\n                        radios = document.getElementsByName('centroid-type');\n                        for (r in radios) {\n                            radios[r].disabled = false;\n                        }\n                    }\n                    break;\n\n                // Position 2 removes graph and scales student centroids.\n                case 2:\n\n                    clusterSliderValue = 2;\n                    clusteringCase2();\n\n                    // Disable centroid type radio buttons.\n                    radios = document.getElementsByName('centroid-type');\n                    for (r in radios) {\n                        radios[r].disabled = true;\n                    }\n\n                    // Disable play and step buttons.\n                    document.getElementById('play-pause').disabled = true;\n                    document.getElementById('play-step').disabled = true;\n\n                    // Student drag on, but not allowed right now, so change message.\n                    if (document.getElementById('dragdrop').innerHTML == langStrings.dragon) {\n                        document.getElementById('dragdrop').innerHTML = '--';\n                    }\n                    break;\n\n                // Position 3 allows selection of the number of clusters.\n                case 3:\n\n                    // If slider was at 1, do not go directly to 3, go to 2 instead.\n                    if (clusterSliderValue == 1) {\n                        clusterSlider.noUiSlider.set(2);\n                        break;\n                    }\n                    clusterSliderValue = 3;\n                    clusteringCase3();\n\n                    if (!clustering) {\n                        // Text box for k-value user input.\n                        var tb = '<input type=\"text\" placeholder=\"' + langStrings.numclusters +\n                            '\" id=\"num-clusters\" size=\"8\" pattern=\"[0-9]{1,2}\">';\n\n                        document.getElementById('cluster-text').innerHTML = tb;\n                    }\n\n                    // Enable play and step buttons, unless reached convergence.\n                    document.getElementById('play-pause').disabled = false;\n                    document.getElementById('play-step').disabled = false;\n\n                    if (document.getElementById('clustering').innerHTML == langStrings.convergence) {\n                        document.getElementById('play-pause').disabled = true;\n                        document.getElementById('play-step').disabled = true;\n                    }\n\n                    // Student drag message was changed, reset it.\n                    if (document.getElementById('dragdrop').innerHTML == '--') {\n                        document.getElementById('dragdrop').innerHTML = langStrings.dragon;\n                    }\n                    break;\n            }\n        }\n\n        /**\n         * Called to show the original graph and unscaled user centroids.\n         */\n        function clusteringCase1() {\n\n            drawGraphNew(false);\n            graphNodes.on('mouseover', null).on('mouseout', null);\n            drawAnimatedCentroids(1.0, 0, 0, animTime);\n            setTimeout(function() {\n                ddd.selectAll('.centroid').raise();\n            }, 100);\n        }\n\n        /**\n         * Called to remove the original graph and scale the user centroids.\n         */\n        function clusteringCase2() {\n\n            graphNodes.transition(trans).style('opacity', 0.0);\n            graphLinks.transition(trans).style('opacity', 0.0);\n            ddd.selectAll('.clustering-centroid')\n                .transition(trans).style('opacity', 0.0);\n            ddd.selectAll('.cluster-hull').transition(trans).style('opacity', 0.0);\n\n            setTimeout(function() {\n                graphNodes.style('display', 'none');\n                graphLinks.style('display', 'none');\n                ddd.selectAll('.clustering-centroid').style('display', 'none');\n                ddd.selectAll('.cluster-hull').style('display', 'none');\n            }, animTime);\n\n            if (!clustering && document.getElementById('cluster-text')) {\n                document.getElementById('cluster-text').innerHTML = langStrings.numclusters;\n            }\n\n            // Get scale value and centroid point.\n            var sctrd = getScaleAndCentroid();\n            if (sctrd === null) {\n                return;\n            }\n            coordsData.scale = sctrd[2];\n            replayCentroid = sctrd;\n\n            setTimeout(function() {\n                drawAnimatedCentroids(sctrd[2], sctrd[0], sctrd[1], animTime);\n            }, animTime / 2);\n        }\n\n        /**\n         * Called to show the clustering centroids and hulls.\n         */\n        function clusteringCase3() {\n\n            ddd.selectAll('.clustering-centroid')\n                .transition(trans)\n                .style('display', 'block')\n                .style('opacity', 1.0);\n\n            ddd.selectAll('.cluster-hull')\n                .transition(trans)\n                .style('display', 'block')\n                .style('opacity', 1.0);\n\n            ddd.selectAll('.clustering-centroid').raise();\n        }\n\n        /**\n         * Draws the student centroids.\n         *\n         * @param {number} scale - The scale at which to draw the centroids\n         * @param {number} cx - The centroid x\n         * @param {number} cy - The centroid y\n         * @param {number} t - The time of transition duration\n         */\n        function drawAnimatedCentroids(scale, cx, cy, t) {\n\n            var o = 14,\n                x,\n                y,\n                dx,\n                dy,\n                points,\n                centreX = width / 2,\n                centreY = height / 2,\n                key;\n\n            if (!scaledCentroids) {\n                scaledCentroids = {};\n                for (key in hullCentroids) {\n                    scaledCentroids[key] = {x: 0, y: 0};\n                }\n            }\n\n            coordsData.centre = {x: cx, y: cy};\n\n            // Scale and translate points.\n            for (key in hullCentroids) {\n\n                x = hullCentroids[key].x;\n                y = hullCentroids[key].y;\n\n                dx = (x - cx) * scale;\n                dy = (y - cy) * scale;\n\n                if (scale == 1.0 && cx == 0 && cy == 0) {\n                    x = cx + dx;\n                    y = cy + dy;\n                } else {\n                    x = centreX + dx;\n                    y = centreY + dy;\n                }\n\n                // Store scaled centroid.\n                scaledCentroids[key].x = x;\n                scaledCentroids[key].y = y;\n\n                points = x + ',' + (y - o) + ' ' + (x + o) + ',' + (y + o) + ' ' + (x - o) + ',' + (y + o);\n\n                ddd.select('#centroid-' + key).transition().duration(t).attr('points', points);\n            }\n\n            // Centroid debugging.\n            var forwardScaling = function(x, y) {\n                // Scale to graphing space.\n                x *= coordsData.distance;\n                x += coordsData.originalx;\n\n                y *= coordsData.distance;\n                y += coordsData.originaly;\n\n                // Scale to scaled clustering area.\n                x -= coordsData.centre.x;\n                x *= coordsData.scale;\n                x += width / 2;\n\n                y -= coordsData.centre.y;\n                y *= coordsData.scale;\n                y += height / 2;\n\n                return {x: x, y: y};\n            };\n            for (key in serverCentroids) {\n                var scaled = forwardScaling(serverCentroids[key].x, serverCentroids[key].y);\n                x = scaled.x;\n                y = scaled.y;\n\n                ddd.select('#server-centroid-' + key)\n                    .transition()\n                    .duration(t)\n                    .attr('cx', x)\n                    .attr('cy', y);\n            }\n        }\n\n        /**\n         * Called to get a scale value and new centroid for cluster slider position 2.\n         *\n         * @return {array}\n         */\n        function getScaleAndCentroid() {\n\n            var arr = [],\n                key;\n\n            // Centroids move around during replay, use other function.\n            if (replaying) {\n                return getReplayScaleAndCentroid();\n            }\n\n            // Gather the student data points into an array.\n            for (key in hullCentroids) {\n                arr[arr.length] = [hullCentroids[key].x, hullCentroids[key].y];\n            }\n\n            var ctdOb = getBoxCentroid(arr);\n            if (ctdOb === null) {\n                return null;\n            }\n            var ctd = [ctdOb.x, ctdOb.y];\n\n            // Find the farthest points from the centroid in x and y directions.\n            var dx,\n                dy,\n                fxkey,\n                fykey,\n                maxX = 0,\n                maxY = 0;\n\n            for (key in hullCentroids) {\n\n                dx = Math.abs(hullCentroids[key].x - ctd[0]);\n                dy = Math.abs(hullCentroids[key].y - ctd[1]);\n\n                if (dx > maxX) {\n                    maxX = dx;\n                    fxkey = key;\n                }\n                if (dy > maxY) {\n                    maxY = dy;\n                    fykey = key;\n                }\n            }\n\n            // Handle case where there is only one data point.\n            if (fykey === undefined && fxkey === undefined) {\n                ctd[2] = 1.0;\n                return ctd;\n            }\n\n            // Use farthest points to get scales.\n            var newx = (hullCentroids[fxkey].x - ctd[0]) + width / 2;\n            var newy = (hullCentroids[fxkey].y - ctd[1]) + height / 2;\n            var ctdX = getScale(newx, newy, width / 2, height / 2);\n\n            newx = (hullCentroids[fykey].x - ctd[0]) + width / 2;\n            newy = (hullCentroids[fykey].y - ctd[1]) + height / 2;\n            var ctdY = getScale(newx, newy, width / 2, height / 2);\n\n            // Want smallest value.\n            ctd[2] = ctdX < ctdY ? ctdX : ctdY;\n            ctd[2] *= 0.9;\n\n            return ctd;\n        }\n\n        /**\n         * Called to get the scale and centroid values during replay. Rather\n         * than current student centroid positions, all future student centroid\n         * positions are considered. This keeps everything on screen when\n         * student centroids start moving around.\n         *\n         * @return {array}\n         */\n        function getReplayScaleAndCentroid() {\n\n            var arr = [],\n                x = 0,\n                y = 0,\n                iter;\n\n            // Use the replay data to gather all future student centroid points.\n            for (iter in replayData) {\n                if (iter >= 0 && iter != 1) {\n                    continue;\n                }\n                for (var clusternum in replayData[iter]) {\n                    for (var member in replayData[iter][clusternum].members) {\n\n                        x = replayData[iter][clusternum].members[member].x;\n                        x = x * coordsScale + coordsData.originalx;\n\n                        y = replayData[iter][clusternum].members[member].y;\n                        y = y * coordsScale + coordsData.originaly;\n\n                        arr[arr.length] = [x, y];\n                    }\n                }\n            }\n\n            // Get the box centroid of the future student centroid points.\n            var ctdOb = getBoxCentroid(arr);\n            if (ctdOb === null) {\n                return null;\n            }\n            var ctd = [ctdOb.x, ctdOb.y];\n\n            // Find the farthest points from the centroid in x and y directions.\n            var dx,\n                dy,\n                fxkey,\n                fykey,\n                maxX = 0,\n                maxY = 0,\n                i;\n\n            for (i = 0; i < arr.length; i++) {\n\n                dx = Math.abs(arr[i][0] - ctd[0]);\n                dy = Math.abs(arr[i][1] - ctd[1]);\n\n                if (dx > maxX) {\n                    maxX = dx;\n                    fxkey = i;\n                }\n                if (dy > maxY) {\n                    maxY = dy;\n                    fykey = i;\n                }\n            }\n\n            // Handle case where there is only one data point.\n            if (fykey === undefined && fxkey === undefined) {\n                ctd[2] = 1.0;\n                return ctd;\n            }\n\n            // Use farthest points to get scales.\n            var newx = (arr[fxkey][0] - ctd[0]) + width / 2;\n            var newy = (arr[fxkey][1] - ctd[1]) + height / 2;\n            var ctdX = getScale(newx, newy, width / 2, height / 2);\n\n            newx = (arr[fykey][0] - ctd[0]) + width / 2;\n            newy = (arr[fykey][1] - ctd[1]) + height / 2;\n            var ctdY = getScale(newx, newy, width / 2, height / 2);\n\n            // Want smallest value.\n            ctd[2] = ctdX < ctdY ? ctdX : ctdY;\n            ctd[2] *= 0.9;\n\n            return ctd;\n        }\n\n        /**\n         * Function to get a centroid based on a bounding box around the points.\n         *\n         * @param {array} arr - An array of points\n         * @return {object}\n         */\n        function getBoxCentroid(arr) {\n\n            // Sanity check.\n            if (arr.length == 0) {\n                return null;\n            } else if (arr.length == 1) {\n                return {x: arr[0][0], y: arr[0][1]};\n            }\n\n            // Find max and min coordinate values to define box.\n            var maxX = 0,\n                maxY = 0,\n                minX = width,\n                minY = height,\n                i,\n                x,\n                y;\n\n            for (i = 0; i < arr.length; i++) {\n\n                x = arr[i][0];\n                y = arr[i][1];\n\n                if (x > maxX) {\n                    maxX = x;\n                }\n                if (x < minX) {\n                    minX = x;\n                }\n                if (y > maxY) {\n                    maxY = y;\n                }\n                if (y < minY) {\n                    minY = y;\n                }\n            }\n            // Return box centre point.\n            return {x: (maxX + minX) / 2, y: (maxY + minY) / 2};\n        }\n\n        /**\n         * Find a scale value that puts the farthest point at the window border,\n         * adapted from https://stackoverflow.com/questions/45367821/where-a-vector-\n         * would-intersect-the-screen-if-extended-towards-its-direction-sw.\n         *\n         * @param {number} p1x - Point x coord.\n         * @param {number} p1y - Point y coord.\n         * @param {number} p2x - Centre x coord.\n         * @param {number} p2y - Centre y coord.\n         * @return {number}\n         */\n        function getScale(p1x, p1y, p2x, p2y) {\n\n            // Distance.\n            var dx = p1x - p2x;\n            var dy = p1y - p2y;\n\n            // Border intersect.\n            var bx = dx > 0 ? width : 0;\n            var by = dy > 0 ? height : 0;\n\n            // Scale value.\n            var tx = (bx - width / 2) / dx;\n            var ty = (by - height / 2) / dy;\n\n            // If dx or dy is 0, tx/ty is infinite.\n            if (isFinite(tx) && isFinite(ty) && tx <= ty) {\n                return tx;\n            } else if (isFinite(tx) && !isFinite(ty)) {\n                return tx;\n            } else if (isFinite(ty)) {\n                return ty;\n            } else {\n                return 1.0;\n            }\n        }\n\n        /**\n         * Called to make the log panel in the clustering screen.\n         */\n        function makeLogPanel() {\n\n            // Get the log panel div.\n            var lp = document.getElementById('log-panel');\n            lp.style.width = legendWidth + 'px';\n\n            // Make the copy button.\n            var copy = document.createElement('button');\n            copy.innerHTML = langStrings.copy;\n            copy.className = \"btn btn-secondary mb-1\";\n\n            copy.addEventListener('click', function() {\n                window.getSelection().selectAllChildren(logPanel);\n                document.execCommand('copy');\n            });\n\n            if (version36) {\n                copy.style.marginLeft = '10px';\n            } else {\n                copy.style.position = 'absolute';\n                copy.style.right = (legendWidth - 40) + 'px';\n            }\n\n            lp.appendChild(copy);\n\n            // Make the print button.\n            var print = document.createElement('button');\n            print.innerHTML = langStrings.print;\n            print.className = \"btn btn-secondary mb-1\";\n            print.addEventListener('click', function() {\n\n                // Adapted from https://stackoverflow.com/questions/4373922/how-to-\n                // print-selected-div-instead-complete-page.\n                var mywindow = window.open();\n\n                mywindow.document.write('<html><head></head><body>');\n                mywindow.document.write(logPanel.innerHTML);\n                mywindow.document.write('</body></html>');\n\n                mywindow.print();\n                mywindow.close();\n            });\n\n            if (version36) {\n                print.style.marginLeft = '10px';\n            } else {\n                print.style.position = 'absolute';\n                print.style.right = (legendWidth - 100) + 'px';\n            }\n\n            lp.appendChild(print);\n\n            // Make the log panel.\n            logPanel = document.createElement('div');\n            logPanel.readOnly = true;\n            logPanel.style.overflow = 'scroll';\n\n            logPanel.style.width = '200px';\n            logPanel.style.height = height + 'px';\n\n            logPanel.style.resize = 'none';\n            logPanel.style.border = '2px solid black';\n\n            if (!version36) {\n                logPanel.style.position = 'absolute';\n                logPanel.style.right = '6px';\n                logPanel.style.top = '120px';\n            }\n\n            lp.appendChild(logPanel);\n        }\n\n        /**\n         * Draws the student centroids with attached event listeners. Centroids\n         * can be dragged and dropped into new cluster, or clicked on to\n         * annotate, or hovered over to view the student's graph.\n         */\n        function drawCentroids() {\n\n            var key;\n            for (key in hullCentroids) {\n\n                graph.append('polygon')\n                    .attr('class', 'centroid')\n                    .attr('id', 'centroid-' + key)\n                    .attr('points', getPolygonPoints(hullCentroids[key].x, hullCentroids[key].y))\n                    .style('stroke', 'black')\n                    .style('stroke-width', '3px')\n                    .style('fill', hullCentroids[key].colour)\n                    .call(ddd.drag()\n                          .on('start', centroidDragStart.bind(this, key))\n                          .on('drag', centroidDrag.bind(this, key))\n                          .on('end', centroidDragEnd.bind(this, key)))\n                    .on('mouseout', clusterMouseout)\n                    .on('mouseover', clusterMouseover.bind(this, key))\n                    .on('click', stopProp)\n                    .on('click.centroidClick', centroidClick.bind(this, realUserIds[key], key, false));\n            }\n\n            if (debugCentroids) {\n                for (key in serverCentroids) {\n                    var cx = (serverCentroids[key].x * coordsData.distance) + coordsData.originalx;\n                    var cy = (serverCentroids[key].y * coordsData.distance) + coordsData.originaly;\n                    graph.append('circle')\n                        .attr('class', 'server-centroid')\n                        .attr('id', 'server-centroid-' + key)\n                        .attr('r', 5)\n                        .attr('cx', cx)\n                        .attr('cy', cy)\n                        .style('fill', 'black');\n                }\n            }\n        }\n\n        /**\n         * Called to get a string representation of coordinate points to draw\n         * a polygon (triangle).\n         *\n         * @param {number} x - The x coordinate value\n         * @param {number} y - The y coordinate value\n         * @return {string}\n         */\n        function getPolygonPoints(x, y) {\n\n            var o = 14;\n            return x + ',' + (y - o) + ' ' + (x + o) + ',' + (y + o) + ' ' + (x - o) + ',' + (y + o);\n        }\n\n        /**\n         * Called to drag a student centroid to a new cluster. This function\n         * draws a semi-transparent triangle at the mouse to drag.\n         *\n         * @param {number} studentKey - The student's id number\n         */\n        function centroidDragStart(studentKey) {\n\n            if (!canDragCentroid()) {\n                return;\n            }\n\n            centroidDragTime = Date.now();\n\n            graph.append('polygon')\n                .attr('class', 'dragged-centroid')\n                .attr('id', 'dragged-' + studentKey)\n                .attr('points', getPolygonPoints(ddd.event.x, ddd.event.y))\n                .style('stroke', 'black')\n                .style('stroke-width', '3px')\n                .style('fill', hullCentroids[studentKey].colour)\n                .style('opacity', 0.5);\n        }\n\n        /**\n         * Called to drag a student centroid to a new cluster. This function\n         * moves the semi-transparent triangle with the mouse.\n         *\n         * @param {number} studentKey - The student's id number\n         */\n        function centroidDrag(studentKey) {\n\n            if (!canDragCentroid()) {\n                return;\n            }\n\n            ddd.select('#dragged-' + studentKey)\n                .attr('points', getPolygonPoints(ddd.event.x, ddd.event.y));\n        }\n\n        /**\n         * Called to drag a student centroid to a new cluster.\n         *\n         * @param {number} studentKey - The student's id number.\n         */\n        function centroidDragEnd(studentKey) {\n\n            ddd.selectAll('.dragged-centroid').remove();\n\n            if (!canDragCentroid()) {\n                return;\n            }\n\n            // User clicked for text box, does not want to drag?\n            if (Date.now() - centroidDragTime < 300) {\n                centroidClick(realUserIds[studentKey], studentKey, false);\n                return;\n            }\n\n            // Reassign student to new cluster.\n            scaledCentroids[studentKey].ci = getNewCluster(ddd.event);\n\n            // Calculate the new centroids.\n            var newCentroids = [];\n            for (var i = 0; i < centroids.length; i++) {\n                newCentroids[i] = getNewCentroid(i);\n            }\n\n            // Swap centroid sets.\n            oldCentroids = centroids;\n            centroids = newCentroids;\n\n            drawAnimatedClusteringCentroids(animTime);\n\n            // Update clustering status text.\n            var out = langStrings.iteration + ': ' + clusterIters;\n            document.getElementById('clustering').innerHTML = out;\n            document.getElementById('dragdrop').innerHTML = langStrings.dragon;\n\n            // Show clustering results in log panel.\n            var clusterMembers = logClusteringResults(clusterIters);\n\n            // Log clustering iteration at server.\n            coordsData.iteration = clusterIters++;\n            sendClustersToServer(clusterMembers);\n        }\n\n        /**\n         * Called to get the clustering centroid closest to a student centroid.\n         *\n         * @param {object} coord - Incoming coordinate.\n         * @return {number} newK - The new cluster number.\n         */\n        function getNewCluster(coord) {\n\n            // Find nearest cluster to where the student centroid was dropped.\n            var min = Number.MAX_SAFE_INTEGER,\n                newK = -1;\n\n            for (var i = 0, d, dx, dy; i < centroids.length; i++) {\n                dx = coord.x - centroids[i].x;\n                dy = coord.y - centroids[i].y;\n                d = Math.sqrt(dx * dx + dy * dy);\n\n                if (d < min) {\n                    min = d;\n                    newK = i;\n                }\n            }\n\n            return newK;\n        }\n\n        /**\n         * Called to test if it is okay to drag a student centroid.\n         *\n         * @return {boolean}\n         */\n        function canDragCentroid() {\n\n            // Not before clustering has started and not during replay.\n            if (!centroids || !document.getElementById('clustering')) {\n                return false;\n            }\n\n            // Not after convergence has been reached.\n            if (document.getElementById('clustering').innerHTML == langStrings.convergence) {\n                return false;\n            }\n\n            // Not until all students are in a cluster, messes with the replay.\n            for (var key in scaledCentroids) {\n                if (scaledCentroids[key].ci === undefined) {\n                    return false;\n                }\n            }\n\n            // Not if cluster slider is moved down.\n            if (clusterSliderValue != 3) {\n                return false;\n            }\n\n            return true;\n        }\n\n        /**\n         * Event listener for student centroids during clustering.\n         */\n        function clusterMouseout() {\n\n            if (noCentroidMouse) {\n                return;\n            }\n\n            ddd.selectAll('.text').remove();\n            ddd.selectAll('rect').remove();\n\n            if (clustering && (replaying || clusterSliderValue == 3) &&\n                getCurrentIteration() !== null) {\n                graphNodes.style('display', 'none').style('opacity', 0.0);\n                graphLinks.remove();\n            }\n        }\n\n        /**\n         * Event listener for mouseover during clustering stage.\n         *\n         * @param {number} sid - The student id\n         */\n        function clusterMouseover(sid) {\n\n            if (noCentroidMouse) {\n                return;\n            }\n\n            ddd.selectAll('.text').remove();\n            ddd.selectAll('rect').remove();\n\n            var r = graph.append('rect');\n            var rtrn = [0];\n\n            // Figure out which centroid coordinates to use.\n            var centres = clusterSliderValue == 1 ? hullCentroids : scaledCentroids;\n\n            // Make the text.\n            var studentName = sid;\n            users.forEach(function(u) {\n                if (u.id == sid) {\n                    studentName = showStudentNames == 1 ? u.firstname + ' ' + u.lastname : u.id;\n                }\n            });\n\n            var rWidth = showStudentNames == 1 ? 70 : 30;\n            var t = graph.append('text')\n                .attr('class', 'text')\n                .attr('id', 't-' + sid)\n                .attr('y', centres[sid].y + 32)\n                .attr('dy', '.40em')\n                .style('pointer-events', 'none')\n                .text(studentName)\n                .call(wrap, rWidth, centres[sid].x - (rWidth + 6) / 2 + 8, rtrn);\n\n            // Get rectangle height.\n            var rh = rtrn[0] * 18 + 16;\n\n            // If node near bottom of graph area, move text above node.\n            if (rh + centres[sid].y + 10 >= height) {\n                t.attr('y', height - rh - (height - centres[sid].y))\n                    .text(studentName)\n                    .call(wrap, rWidth, centres[sid].x - (rWidth + 6) / 2 + 8, rtrn);\n            }\n\n            // Make the rectange background.\n            r.attr('id', 'r-' + sid)\n                .attr('x', centres[sid].x - (rWidth + 6) / 2)\n                .attr('y', rh + centres[sid].y + 10 <= height ? centres[sid].y + 16 :\n                      height - rh - 16 - (height - centres[sid].y))\n                .attr('width', rWidth + 16)\n                .attr('height', rh)\n                .style('stroke', 'black')\n                .style('fill', 'yellow');\n\n            // Draw the student's behaviour graph.\n            if (clustering && (replaying || clusterSliderValue == 3) &&\n                getCurrentIteration() !== null) {\n\n                graphLinks.remove();\n\n                // Get the non-visible nodes.\n                var notNodes = {},\n                    i;\n                for (i = 0; i < graphData.nodes.length; i++) {\n                    if (!graphData.nodes[i].visible) {\n                        notNodes[graphData.nodes[i].id] = 1;\n                    }\n                }\n\n                // Build a linkset for the student.\n                var links = {},\n                    link,\n                    src,\n                    trg,\n                    id;\n                for (i = sliderValues[0]; i < graphData.edges[sid].length && i <= sliderValues[1]; i++) {\n\n                    // Parse out the souce and target ids.\n                    link = graphData.edges[sid][i];\n\n                    if (typeof link.source == 'string') {\n                        src = parseInt(link.source);\n                        trg = parseInt(link.target);\n                    } else {\n                        src = link.source.id;\n                        trg = link.target.id;\n                    }\n\n                    // Don't link to an invisible node.\n                    if (notNodes[src] || notNodes[trg]) {\n                        continue;\n                    }\n                    id = src + '_' + trg;\n\n                    // Add the link to the link set, considering weights.\n                    if (!links[id]) {\n                        links[id] = 1;\n                    } else {\n                        links[id]++;\n                    }\n                }\n\n                // Make the actual student links.\n                var linx = [],\n                    split,\n                    colour = graphData.edges[sid][0].colour;\n\n                for (link in links) {\n                    split = link.split('_');\n                    if (useLSA) {\n                        linx[linx.length] = {\n                            source: getEqualToNode(split[0]),\n                            target: getEqualToNode(split[1]),\n                            weight: links[link],\n                            colour: colour\n                        };\n                    } else {\n                        linx[linx.length] = {\n                            source: split[0],\n                            target: split[1],\n                            weight: links[link],\n                            colour: colour\n                        };\n                    }\n                }\n                // Keep the section to module links.\n                for (i = 0; i < graphData.links.length; i++) {\n                    linx[linx.length] = graphData.links[i];\n                }\n\n                // Show the graph with student links.\n                if (!useLSA) {\n                    simulation.force('link').links(linx);\n                }\n                makeLinks(linx);\n\n                graphNodes\n                    .style('display', 'block')\n                    .style('opacity', 1.0);\n\n                simulation.restart();\n                setTimeout(function() {\n                    simulation.stop();\n                    graphNodes.lower();\n                    graphLinks.lower();\n                }, 1);\n            }\n        }\n\n        /**\n         * Event listener for left-clicking a student centroid triangle or a clustering\n         * centroid X. Creates a text area and button for entering comments about a centroid.\n         *\n         * @param {number} user - The student/teacher id\n         * @param {number} key - The centroid array key\n         * @param {boolean} cluster - A flag to detemine which centroids to use\n         */\n        function centroidClick(user, key, cluster) {\n\n            // Only show when clustering and only one per user.\n            if (!clustering ||\n                document.getElementById('textbox-' + user) ||\n                getCurrentIteration() === null) {\n                return;\n\n            } else if (!replaying && clustering && clusterSliderValue != 3) {\n                // Fixes bug where comment box showing when should not.\n                return;\n            }\n\n            // The text box.\n            var textBox = document.createElement('textarea');\n            textBox.id = 'textbox-' + user;\n            textBox.style.resize = 'both';\n            textBox.style.position = 'absolute';\n\n            // Show previous comment if exists.\n            if (comments[user]) {\n                textBox.value = comments[user];\n            }\n            // Do not allow researcher to alter another user's comments.\n            if (replayUserId != userId) {\n                textBox.readOnly = true;\n            }\n            document.body.appendChild(textBox);\n\n            // Determine position of text area relative to the node.\n            var bnds = textBox.getBoundingClientRect();\n            var gbb = document.getElementsByTagName('svg')[0].getBoundingClientRect();\n\n            // Centre if possible, move left or right if centroid close to edge.\n            var scx = cluster ? centroids[key].x : scaledCentroids[key].x;\n            var tbx;\n            if (scx + bnds.width / 2 >= width) {\n                tbx = scx + gbb.x - bnds.width;\n            } else if (scx - bnds.width / 2 <= 0) {\n                tbx = scx + gbb.x;\n            } else {\n                tbx = scx + gbb.x - (bnds.width / 2);\n            }\n            textBox.style.left = tbx + 'px';\n\n            // At centroid level.\n            var scy = cluster ? centroids[key].y : scaledCentroids[key].y;\n            var tby = incoming.version40 ? ddd.event.y : scy + 220;\n            textBox.style.top = tby + 'px';\n\n            // The save button.\n            var save = document.createElement('button');\n            save.innerHTML = replayUserId == userId ? langStrings.save : langStrings.close;\n\n            // Position based on text area position.\n            save.style.position = 'absolute';\n            save.style.left = tbx + 'px';\n            save.style.top = (tby + bnds.height) + 'px';\n\n            document.body.appendChild(save);\n\n            textBox.focus();\n\n            commentTextBoxes[user] = {button: save, textbox: textBox};\n\n            // Click listener for text box.\n            textBox.addEventListener('click', function() {\n\n                // Bring to front if behind.\n                this.parentNode.appendChild(this);\n                save.parentNode.appendChild(save);\n\n                // Allow select text with mouse drag.\n                this.focus();\n            });\n\n            // Move save button when textarea is resized.\n            var dragging = false;\n\n            textBox.addEventListener('mousedown', function() {\n                dragging = true;\n            });\n\n            textBox.addEventListener('mouseup', function() {\n                dragging = false;\n            });\n\n            textBox.addEventListener('mousemove', function() {\n                if (dragging) {\n                    bnds = this.getBoundingClientRect();\n                    save.style.left = tbx + 'px';\n                    save.style.top = (tby + bnds.height) + 'px';\n                }\n            });\n\n            // Click listener for save button.\n            save.addEventListener('click', function() {\n\n                if (replayUserId == userId) {\n\n                    // The comment data for the server.\n                    var data = {\n                        'coordsid':  lastChange,\n                        'clusterid': coordsData.clusterId,\n                        'studentid': user,\n                        'remark':    textBox.value\n                    };\n\n                    // Do not call server if the text area is empty or has not changed.\n                    if (textBox.value != '' && textBox.value != comments[user]) {\n\n                        comments[user] = textBox.value;\n                        callServer(commentsScript, data);\n                    }\n                }\n\n                document.body.removeChild(textBox);\n                document.body.removeChild(save);\n                delete commentTextBoxes[user];\n            });\n        }\n        // End of modular encapsulation, start the program.\n        init(incoming);\n    };\n    return behaviourAnalytics;\n});\n"],"names":["factory","define","amd","window","behaviourAnalytics","incoming","coordsScript","clustersScript","commentsScript","manualScript","deleteScript","predictionScript","logs","users","groups","groupMembers","groupMenu","modules","legendWidth","courseName","iframeURL","positioning","originalPositioning","presetNodes","lordLinks","coordsScale","courseId","userId","allGraphs","allLinks","allScales","allChanges","allNames","allMods","allSetNames","allsKey","lastChange","comments","realUserIds","anonUserIds","langStrings","sessionKey","originalReplayData","ddd","trans","slider","prng","graph","width","height","simulation","graphNodes","graphLinks","linkForce","defaultWeight","linkAlpha","dragAlpha","dragEndAlpha","graphData","studentMenu","timeSlider","sliderValues","sliderHeight","clusterButton","replaying","replayMenu","replayData","replayCentroid","positiveIters","negativeIters","clusterSlider","clusterSliderValue","clusterSliderPanelWidth","logPanel","nodeLegend","nodeBoxes","teacherMenu","colours","colourIndex","modColours","centroidColours","graphing","clustering","clusterIters","clusterAnimInterval","useDefaultConcave","concaveHullDistance","curveType","hullOpacity","hullCentroids","scaledCentroids","centroids","oldCentroids","noCentroidMouse","noNodeMouse","iframeStaticPos","iframeRight","inIframe","version36","showStudentNames","convergenceDistance","dragEndTime","dragstartedFunc","draggedFunc","dragendedFunc","rightClickFunc","nodeRadius","coordsData","animTime","gotAllNodes","haveManualClustering","centroidDragTime","replayUserId","isResearcher","clickData","useGeometricCentroids","predictionAnalysis","useLSA","lsaTime","commentTextBoxes","debugCentroids","serverCentroids","manualClusters","manualCentroids","assignModuleColours","forEach","m","entype","key","c","Math","floor","random","length","isOKColour","undefined","getData","nodes","links","edges","maxSession","makeNodeData","makeStudentLinks","vis","xc","yc","data","ob","id","visible","sect","xcoord","ycoord","name","group","type","colour","section","grouping","source","target","weight","originalLinks","root","o","m1","split","l","r","Object","keys","m2","n","isNaN","edge","i","moduleId","user","u","initPositioning","dragstarted","dragged","dragended","sm","document","getElementById","div","createElement","copy","innerHTML","className","addEventListener","copyGraph","appendChild","bHeight","getBoundingClientRect","print","printGraph","size","style","minWidth","menuHeight","changeGraph","value","text","selected","makeTeacherMenu","initGraph","makeNodeLegend","weightSlider","min","max","step","strength","this","createTextNode","linksweight","makeWeightControl","setTimeout","force","select","append","attr","forceLink","d","forceSimulation","forceManyBody","forceCollide","radius","forceCenter","forceX","forceY","makeNodes","makeLinks","on","selectAll","remove","mouseover","mouseout","tick1","tick2","tick","stop","drawTime","sendCoordsToServer","rclick","dstart","drag","dend","enter","call","node","keepText","up","left","right","rwidth","ifwidth","ifheight","txt","t","Date","now","rtrn","y","wrap","x","rh","attrX","raise","rectH","rectW","rectX","rectY","iframe","position","gbb","getElementsByTagName","bbb","body","innerWidth","yoffset","top","bgrnd","parseInt","b","removeIframes","src","makeIframe","rectWidth","xOffset","lineNumber","each","words","reverse","line","dy","parseFloat","tspan","word","pop","push","join","getComputedTextLength","obj","linkMouseover","clusteroidMouseover","bind","xofs","yofs","dist","originalx","originaly","sx","sy","distance","sourceNode","filter","sid","targetNode","tid","mins","setTime","getMinutes","getHours","toDateString","dx","normalized","cx","cy","dn","sqrt","scale","time","callServer","url","outData","req","XMLHttpRequest","open","setRequestHeader","onreadystatechange","readyState","status","encoded","JSON","stringify","replaceAll","send","img","Image","svgStr","XMLSerializer","serializeToString","btoa","createRange","setStartBefore","setEndAfter","selectNode","getSelection","addRange","execCommand","removeChild","mywindow","write","close","sel","j","options","rightClick","link","nodeKey","currentWeight","checked","removeEventListener","keepChecked","legendChange","mpos","maxWidth","marginTop","version40","legendResize","e","newWidth","wd","offsetLeft","cursor","parent","rootSpan","rootLI","rootUL","li","ul","span","sort","a","expand","getCheckbox","makeLegend","parentElement","querySelector","classList","toggle","mid","nodeType","box","nodeT","label","color","thisId","thisChecked","thisType","thisGroup","checkWeight","drawGraph","clickedNode","event","preventDefault","hide","active","alphaTarget","restart","fx","fy","makeClusterButton","cluster","doCluster","makeStudentMenu","cbHeight","multiple","shade","drawGraphNew","aName","firstname","lastname","bName","addListItem","menu","makeGroupMenu","gid","realId","makeTimeSlider","divider","create","start","range","connect","pips","mode","stepped","density","noUiSlider","values","handle","dispatchEvent","Event","notNodes","doNodes","doLinks","makePolygonHulls","doHulls","dl","sl","getEqualToNode","find","nodeGroups","snx","sny","tnx","tny","nd","lc","makePolygonHull","getGeometricCentroids","getDecomposedCentroids","student","end","half","tx","ty","manualHull","useTrans","k","coords","hullPadding","hullClass","lf","polyPoints","p1","p2","hull","concaveHull","padding","pgh","curve","vecSum","pv1","pv2","vecScaleTo","v","vecScale","vecUnit","vecFrom","p0","norm","extensionVec","extension0","extension1","tangentHalfLength","controlDelta","pv0","normalVec","unitNormal","invControlDelta","control0","control1","control3","doGraph","clearInterval","resetLogPanel","display","clusterId","ph","numclusters","cd","disabled","removeAttribute","set","ctrlDiv","runkmeans","st","dd","playPause","marginLeft","marginRight","doPlayPause","playStep","runClusteringIter","reset","stopClustering","makeAnimationControls","handles","orientation","direction","format","to","showcentroids","removegraph","from","updateClusterSlider","btH","ctH","radio","radioClick","geometrics","decomposed","makeClusterSlider","makeLogPanel","drawCentroids","replayCentroidDragStart","studentKey","canDragReplayCentroid","getPolygonPoints","replayCentroidDrag","replayCentroidDragEnd","manData","ids","centroidClick","iter","member","members","copyReplayData","currentIter","getCurrentIteration","newK","getNewCluster","drawManualClusters","logManualClusteringResults","out","clusterCoords","centroid","reverseScale","num","iteration","coordsid","sendManualClustersToServer","measures","p","truePositives","falsePositives","falseNegatives","results","ci","tp","fp","fn","precision","recall","f1","fhalf","f2","getClusterMeasures","lpt","manualcluster","disttocluster","round","indexOf","slice","toFixed","lpv","lpv0","startsWith","totalmeasures","convergence","clusterNum","manMembers","hulls","points","noManualCentroids","getElementsByClassName","getClusteringCentroid","did","cid","centroidx","centroidy","stopProp","transition","duration","stopPropagation","forwardScale","clusterScaling","centre","changePredictionAnalysis","userid","selectedIndex","clusterid","deleteClusteringData","confirm","delconfirm","replace","replayStop","ctb","textbox","button","resetPlayButton","opacity","readOnly","replayPause","replayForward","setInterval","resetPlay","actualIter","clusteringCase2","clusteringCase3","runReplayIter","replayBack","clusteringCase1","removeLog","firstRound","drawClusteringCentroids","drawAnimatedClusteringCentroids","drawAnimatedCentroids","updateManualClusters","logClusteringResults","opts","dragon","dragoff","setAttribute","addClusteringNameToNavigation","header","textBox","placeholder","clusteringname","clusteringnamebutton","studentid","remark","datasetid","nm","getRandomCentroid","includes","randcentroids","clusterMembers","sendClustersToServer","newCentroids","getNewCentroid","converged","total","runKMeans","ctd","col","rx","ry","MX","MY","manualClustering","removeGraph","studentKeys","numStudents","common","s","lid","Number","MAX_SAFE_INTEGER","getCommonLinks","lower","arr","numstudents","numofclusters","serverData","rsd","usegeometric","newx","newy","radios","tb","getElementsByName","sctrd","clusternum","ctdOb","getBoxCentroid","fxkey","fykey","maxX","maxY","abs","ctdX","getScale","ctdY","getReplayScaleAndCentroid","getScaleAndCentroid","centreX","centreY","scaled","minX","minY","p1x","p1y","p2x","p2y","isFinite","lp","selectAllChildren","overflow","resize","border","centroidDragStart","centroidDrag","centroidDragEnd","clusterMouseout","clusterMouseover","canDragCentroid","coord","centres","studentName","rWidth","trg","linx","bnds","scx","tbx","tby","save","dragging","scy","focus","parentNode","mods","panelwidth","legendwidth","iframeurl","showstudentnames","nodecoords","courseid","graphs","alllinks","scales","changes","names","allmods","setnames","lastchange","strings","coordsscript","clustersscript","commentsscript","manualscript","deletescript","sesskey","gotallnodes","debugcentroids","isresearcher","replaydata","predictionscript","uselsa","predictionanalysis","dataDrivenDocs","MT","mersenneTwister","ease","easeLinear","curveCatmullRomClosed","assign","quiz","forum","resource","lti","book","page","lesson","chat","choice","feedback","glossary","survey","wiki","workshop","scorm","imscp","folder","innerHeight","h","doLSAGraph","manualdata","0","1","2","playStep1","playStep2","del","delbutton","predictionbox","pred","makeReplayControls","last","islsa","manualData","anonId","changeReplayData","ll","fakeStudentMenu","coordid","makeReplayMenu","init"],"mappings":";;CA8BA,SAAUA,GACgB,mBAAXC,QAAyBA,OAAOC,IAEvCD,OAAO,GAAID,GAGXG,OAAOC,mBAAqBJ,IANpC,CAQG,WA85MC,OA55MyB,SAASK,GAG9B,IAAIC,EACAC,EACAC,EACAC,EACAC,EACAC,EAGAC,EACAC,EACAC,EACAC,EACAC,EACAC,EAEAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EAGAC,EACAC,EACAC,EACAC,EAGAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,GACAC,EACAC,GACAC,GAGAC,GACAC,EACAC,GACAC,GACAC,EACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GAGAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GAIAC,GACAC,GACAC,GACAC,GAEAC,GACAC,GACAC,GAEAC,GACAC,GACAC,GAGAC,GACAC,GAjBAC,GAAiB,GACjBC,GAAkB,GAkVtB,SAASC,KAEL3G,EAAQ4G,QAAQ,SAASC,GACrB,MAAQ/C,GAAW+C,EAAEC,SAAS,CAG1B,IAGSC,EAHLC,EAAIpD,GAAQqD,KAAKC,MAAMrF,EAAKsF,SAAWvD,GAAQwD,SAC/CC,GAAa,EAEjB,IAASN,KAAOjD,GACRA,GAAWiD,IAAQC,IACnBK,GAAa,GAGrBvD,GAAW+C,EAAEC,QAAUO,EAAaL,OAAIM,KAQpD,SAASC,KAEL9E,GAAY,CAAC+E,MAAO,GAAIC,MAAO,GAAIC,MAAO,GAAIC,WAAY,GAE1DC,IACAC,KAOJ,SAASD,IAEL,IAEIE,EACAC,EACAC,EAJAC,EAAO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"}